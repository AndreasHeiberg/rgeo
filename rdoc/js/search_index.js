var search_data = {"index":{"searchIndex":["rgeo","cartesian","analysis","boundingbox","factory","coordsys","cs","angularunit","axisinfo","base","compoundcoordinatesystem","coordinatesystem","coordinatesystemfactory","datum","ellipsoid","geocentriccoordinatesystem","geographiccoordinatesystem","horizontalcoordinatesystem","horizontaldatum","info","linearunit","localcoordinatesystem","localdatum","primemeridian","projectedcoordinatesystem","projection","projectionparameter","unit","verticalcoordinatesystem","verticaldatum","wgs84conversioninfo","proj4","srsdatabase","activerecordtable","entry","interface","proj4data","srorg","urlreader","error","invalidgeometry","parseerror","rgeoerror","unsupportedoperation","feature","curve","factory","instance","factorygenerator","geometry","geometrycollection","instance","line","linestring","linearring","mixincollection","typedata","multicurve","multilinestring","multipoint","multipolygon","multisurface","point","polygon","surface","type","geographic","factory","projectedwindow","geos","capifactory","ffifactory","factory","zmfactory","wkrep","wkbgenerator","wkbparser","wktgenerator","wktparser","*()","*()","+()","-()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","[]()","add()","add()","add()","area()","area()","as_binary()","as_text()","boundary()","bounding_points()","buffer()","buffer_resolution()","buffer_resolution()","buffer_resolution()","buffer_resolution()","call()","canonical_hash()","canonical_str()","capi_supported?()","cast()","center_m()","center_point()","center_x()","center_xy()","center_y()","center_z()","centroid()","centroid()","check_type()","clamped_by()","clear_cache()","clear_cache()","clear_cache()","clear_cache()","clear_cache()","collection()","collection()","collection()","collection()","collection()","collection()","collection()","contains?()","contains?()","contains_point?()","contains_window?()","convert_case()","convex_hull()","coord_sys()","coord_sys()","coord_sys()","coord_sys()","coord_sys()","coord_sys()","coord_sys()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_compound_coordinate_system()","create_ellipsoid()","create_ellipsoid()","create_flattened_sphere()","create_flattened_sphere()","create_from_geometry()","create_from_points()","create_from_wkt()","create_from_wkt()","create_geographic_coordinate_system()","create_horizontal_datum()","create_local_coordinate_system()","create_local_datum()","create_prime_meridian()","create_projected_coordinate_system()","create_projection()","create_vertical_coordinate_system()","create_vertical_datum()","crosses?()","crosses_seam?()","decorate()","degenerate?()","degenerate?()","difference()","dimension()","disjoint?()","distance()","each()","each_immediate_subtype()","each_parameter()","emit_ewkb_srid?()","emit_ewkt_srid?()","empty?()","end_point()","envelope()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equals?()","exact_factory()","exact_factory()","extension()","exterior_ring()","factory()","factory()","factory()","factory()","factory()","factory_generator()","factory_generator()","factory_generator()","factory_generator()","ffi_supported?()","for_corners()","for_type()","generate()","generate()","geocentric?()","geographic?()","geometry_n()","geometry_type()","get()","get()","get()","get()","get()","get_axis()","get_axis()","get_axis()","get_axis()","get_axis()","get_axis()","get_axis()","get_geographic()","get_parameter()","get_units()","get_units()","get_units()","get_units()","get_units()","get_units()","get_units()","get_wgs84_conversion_info()","has_m()","has_projection?()","has_z()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","height()","hex_format?()","ignore_extra_bytes?()","ignore_extra_tokens?()","include_in_class()","include_in_class()","include_in_object()","include_in_object()","infinitesimal?()","inspect()","inspect()","inspect()","inspect()","interior_ring_n()","interior_rings()","intersection()","intersects?()","is_capi_geos?()","is_closed?()","is_closed?()","is_empty?()","is_ffi_geos?()","is_geos?()","is_ring?()","is_simple?()","length()","length()","lenient_multi_polygon_assertions?()","lenient_multi_polygon_assertions?()","lenient_multi_polygon_assertions?()","lenient_multi_polygon_assertions?()","line()","line()","line()","line()","line()","line()","line()","line_string()","line_string()","line_string()","line_string()","line_string()","line_string()","line_string()","linear_ring()","linear_ring()","linear_ring()","linear_ring()","linear_ring()","linear_ring()","linear_ring()","little_endian?()","m()","m_factory()","m_span()","max_m()","max_point()","max_x()","max_y()","max_z()","meters_per_unit()","min_m()","min_point()","min_x()","min_y()","min_z()","multi_line_string()","multi_line_string()","multi_line_string()","multi_line_string()","multi_line_string()","multi_line_string()","multi_line_string()","multi_point()","multi_point()","multi_point()","multi_point()","multi_point()","multi_point()","multi_point()","multi_polygon()","multi_polygon()","multi_polygon()","multi_polygon()","multi_polygon()","multi_polygon()","multi_polygon()","ne_point()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","num_conversion_to_wgs84()","num_geometries()","num_interior_rings()","num_parameters()","num_points()","nw_point()","original_str()","overlaps?()","override_cast()","override_cast()","override_cast()","override_cast()","override_cast()","parse()","parse()","parse_hex()","parse_wkb()","parse_wkb()","parse_wkb()","parse_wkb()","parse_wkb()","parse_wkb()","parse_wkb()","parse_wkt()","parse_wkt()","parse_wkt()","parse_wkt()","parse_wkt()","parse_wkt()","parse_wkt()","point()","point()","point()","point()","point()","point()","point()","point_n()","point_on_surface()","point_on_surface()","points()","polygon()","polygon()","polygon()","polygon()","polygon()","polygon()","polygon()","preferred_factory()","preferred_factory_generator()","proj4()","proj4()","proj4()","proj4()","proj4()","proj4()","proj4()","project()","projected_factory()","projection_factory()","projection_limits_window()","projection_wraps?()","property()","property()","property()","property()","property()","property()","property()","radians?()","radians_per_unit()","random_point()","relate()","relate?()","rep_equals?()","ring_direction()","scaled_by()","se_point()","simple_factory()","simple_factory_generator()","simple_mercator_factory()","single()","size()","spherical_factory()","square_brackets?()","srid()","srid()","srid()","srid()","srid()","srid()","srid()","start_point()","strict_wkt11?()","subdivide()","subtype_of?()","supertype()","support_ewkb?()","support_ewkt?()","support_wkb12?()","support_wkt12?()","supported?()","supported?()","surrounding_point()","sw_point()","sym_difference()","tag_format()","to_geometry()","to_s()","to_s()","to_wkt()","touches?()","transform()","transform_coords()","type_format()","type_format()","type_name()","union()","unproject()","version()","version()","version_string()","version_string()","width()","with_margin()","within?()","wrap_fg_geom()","x()","x_max()","x_min()","x_span()","x_span()","y()","y_max()","y_min()","y_span()","y_span()","yaml_supported?()","z()","z_factory()","z_span()","history","readme","spatial_programming_with_rgeo"],"longSearchIndex":["rgeo","rgeo::cartesian","rgeo::cartesian::analysis","rgeo::cartesian::boundingbox","rgeo::cartesian::factory","rgeo::coordsys","rgeo::coordsys::cs","rgeo::coordsys::cs::angularunit","rgeo::coordsys::cs::axisinfo","rgeo::coordsys::cs::base","rgeo::coordsys::cs::compoundcoordinatesystem","rgeo::coordsys::cs::coordinatesystem","rgeo::coordsys::cs::coordinatesystemfactory","rgeo::coordsys::cs::datum","rgeo::coordsys::cs::ellipsoid","rgeo::coordsys::cs::geocentriccoordinatesystem","rgeo::coordsys::cs::geographiccoordinatesystem","rgeo::coordsys::cs::horizontalcoordinatesystem","rgeo::coordsys::cs::horizontaldatum","rgeo::coordsys::cs::info","rgeo::coordsys::cs::linearunit","rgeo::coordsys::cs::localcoordinatesystem","rgeo::coordsys::cs::localdatum","rgeo::coordsys::cs::primemeridian","rgeo::coordsys::cs::projectedcoordinatesystem","rgeo::coordsys::cs::projection","rgeo::coordsys::cs::projectionparameter","rgeo::coordsys::cs::unit","rgeo::coordsys::cs::verticalcoordinatesystem","rgeo::coordsys::cs::verticaldatum","rgeo::coordsys::cs::wgs84conversioninfo","rgeo::coordsys::proj4","rgeo::coordsys::srsdatabase","rgeo::coordsys::srsdatabase::activerecordtable","rgeo::coordsys::srsdatabase::entry","rgeo::coordsys::srsdatabase::interface","rgeo::coordsys::srsdatabase::proj4data","rgeo::coordsys::srsdatabase::srorg","rgeo::coordsys::srsdatabase::urlreader","rgeo::error","rgeo::error::invalidgeometry","rgeo::error::parseerror","rgeo::error::rgeoerror","rgeo::error::unsupportedoperation","rgeo::feature","rgeo::feature::curve","rgeo::feature::factory","rgeo::feature::factory::instance","rgeo::feature::factorygenerator","rgeo::feature::geometry","rgeo::feature::geometrycollection","rgeo::feature::instance","rgeo::feature::line","rgeo::feature::linestring","rgeo::feature::linearring","rgeo::feature::mixincollection","rgeo::feature::mixincollection::typedata","rgeo::feature::multicurve","rgeo::feature::multilinestring","rgeo::feature::multipoint","rgeo::feature::multipolygon","rgeo::feature::multisurface","rgeo::feature::point","rgeo::feature::polygon","rgeo::feature::surface","rgeo::feature::type","rgeo::geographic","rgeo::geographic::factory","rgeo::geographic::projectedwindow","rgeo::geos","rgeo::geos::capifactory","rgeo::geos::ffifactory","rgeo::geos::factory","rgeo::geos::zmfactory","rgeo::wkrep","rgeo::wkrep::wkbgenerator","rgeo::wkrep::wkbparser","rgeo::wkrep::wktgenerator","rgeo::wkrep::wktparser","rgeo::feature::geometry#*()","rgeo::geographic::projectedwindow#*()","rgeo::feature::geometry#+()","rgeo::feature::geometry#-()","rgeo::cartesian::factory#==()","rgeo::coordsys::cs::base#==()","rgeo::coordsys::proj4#==()","rgeo::feature::geometry#==()","rgeo::geographic::factory#==()","rgeo::geos::capifactory#==()","rgeo::geos::capifactory#==()","rgeo::geos::ffifactory#==()","rgeo::geos::zmfactory#==()","rgeo::feature::type#===()","rgeo::feature::geometrycollection#[]()","rgeo::cartesian::boundingbox#add()","rgeo::feature::mixincollection#add()","rgeo::feature::mixincollection::typedata#add()","rgeo::feature::multisurface#area()","rgeo::feature::surface#area()","rgeo::feature::geometry#as_binary()","rgeo::feature::geometry#as_text()","rgeo::feature::geometry#boundary()","rgeo::geographic::projectedwindow::bounding_points()","rgeo::feature::geometry#buffer()","rgeo::geos::capifactory#buffer_resolution()","rgeo::geos::capifactory#buffer_resolution()","rgeo::geos::ffifactory#buffer_resolution()","rgeo::geos::zmfactory#buffer_resolution()","rgeo::feature::factorygenerator#call()","rgeo::coordsys::proj4#canonical_hash()","rgeo::coordsys::proj4#canonical_str()","rgeo::geos::capi_supported?()","rgeo::feature::cast()","rgeo::cartesian::boundingbox#center_m()","rgeo::geographic::projectedwindow#center_point()","rgeo::cartesian::boundingbox#center_x()","rgeo::geographic::projectedwindow#center_xy()","rgeo::cartesian::boundingbox#center_y()","rgeo::cartesian::boundingbox#center_z()","rgeo::feature::multisurface#centroid()","rgeo::feature::surface#centroid()","rgeo::feature::type#check_type()","rgeo::geographic::projectedwindow#clamped_by()","rgeo::coordsys::srsdatabase::activerecordtable#clear_cache()","rgeo::coordsys::srsdatabase::interface#clear_cache()","rgeo::coordsys::srsdatabase::proj4data#clear_cache()","rgeo::coordsys::srsdatabase::srorg#clear_cache()","rgeo::coordsys::srsdatabase::urlreader#clear_cache()","rgeo::cartesian::factory#collection()","rgeo::feature::factory#collection()","rgeo::geographic::factory#collection()","rgeo::geos::capifactory#collection()","rgeo::geos::capifactory#collection()","rgeo::geos::ffifactory#collection()","rgeo::geos::zmfactory#collection()","rgeo::cartesian::boundingbox#contains?()","rgeo::feature::geometry#contains?()","rgeo::geographic::projectedwindow#contains_point?()","rgeo::geographic::projectedwindow#contains_window?()","rgeo::wkrep::wktgenerator#convert_case()","rgeo::feature::geometry#convex_hull()","rgeo::cartesian::factory#coord_sys()","rgeo::feature::factory#coord_sys()","rgeo::geographic::factory#coord_sys()","rgeo::geos::capifactory#coord_sys()","rgeo::geos::capifactory#coord_sys()","rgeo::geos::ffifactory#coord_sys()","rgeo::geos::zmfactory#coord_sys()","rgeo::coordsys::cs::angularunit::create()","rgeo::coordsys::cs::axisinfo::create()","rgeo::coordsys::cs::compoundcoordinatesystem::create()","rgeo::coordsys::cs::ellipsoid::create()","rgeo::coordsys::cs::geocentriccoordinatesystem::create()","rgeo::coordsys::cs::geographiccoordinatesystem::create()","rgeo::coordsys::cs::horizontaldatum::create()","rgeo::coordsys::cs::linearunit::create()","rgeo::coordsys::cs::localcoordinatesystem::create()","rgeo::coordsys::cs::localdatum::create()","rgeo::coordsys::cs::primemeridian::create()","rgeo::coordsys::cs::projectedcoordinatesystem::create()","rgeo::coordsys::cs::projection::create()","rgeo::coordsys::cs::projectionparameter::create()","rgeo::coordsys::cs::unit::create()","rgeo::coordsys::cs::verticalcoordinatesystem::create()","rgeo::coordsys::cs::verticaldatum::create()","rgeo::coordsys::cs::wgs84conversioninfo::create()","rgeo::coordsys::proj4::create()","rgeo::geos::capifactory::create()","rgeo::geos::capifactory::create()","rgeo::geos::zmfactory::create()","rgeo::coordsys::cs::coordinatesystemfactory#create_compound_coordinate_system()","rgeo::coordsys::cs::coordinatesystemfactory#create_ellipsoid()","rgeo::coordsys::cs::ellipsoid::create_ellipsoid()","rgeo::coordsys::cs::coordinatesystemfactory#create_flattened_sphere()","rgeo::coordsys::cs::ellipsoid::create_flattened_sphere()","rgeo::cartesian::boundingbox::create_from_geometry()","rgeo::cartesian::boundingbox::create_from_points()","rgeo::coordsys::cs::create_from_wkt()","rgeo::coordsys::cs::coordinatesystemfactory#create_from_wkt()","rgeo::coordsys::cs::coordinatesystemfactory#create_geographic_coordinate_system()","rgeo::coordsys::cs::coordinatesystemfactory#create_horizontal_datum()","rgeo::coordsys::cs::coordinatesystemfactory#create_local_coordinate_system()","rgeo::coordsys::cs::coordinatesystemfactory#create_local_datum()","rgeo::coordsys::cs::coordinatesystemfactory#create_prime_meridian()","rgeo::coordsys::cs::coordinatesystemfactory#create_projected_coordinate_system()","rgeo::coordsys::cs::coordinatesystemfactory#create_projection()","rgeo::coordsys::cs::coordinatesystemfactory#create_vertical_coordinate_system()","rgeo::coordsys::cs::coordinatesystemfactory#create_vertical_datum()","rgeo::feature::geometry#crosses?()","rgeo::geographic::projectedwindow#crosses_seam?()","rgeo::feature::factorygenerator::decorate()","rgeo::cartesian::boundingbox#degenerate?()","rgeo::geographic::projectedwindow#degenerate?()","rgeo::feature::geometry#difference()","rgeo::feature::geometry#dimension()","rgeo::feature::geometry#disjoint?()","rgeo::feature::geometry#distance()","rgeo::feature::geometrycollection#each()","rgeo::feature::type#each_immediate_subtype()","rgeo::coordsys::cs::projection#each_parameter()","rgeo::wkrep::wkbgenerator#emit_ewkb_srid?()","rgeo::wkrep::wktgenerator#emit_ewkt_srid?()","rgeo::cartesian::boundingbox#empty?()","rgeo::feature::curve#end_point()","rgeo::feature::geometry#envelope()","rgeo::cartesian::factory#eql?()","rgeo::coordsys::cs::base#eql?()","rgeo::coordsys::proj4#eql?()","rgeo::feature::geometry#eql?()","rgeo::geographic::factory#eql?()","rgeo::geos::capifactory#eql?()","rgeo::geos::capifactory#eql?()","rgeo::geos::ffifactory#eql?()","rgeo::geos::zmfactory#eql?()","rgeo::feature::geometry#equals?()","rgeo::wkrep::wkbparser#exact_factory()","rgeo::wkrep::wktparser#exact_factory()","rgeo::coordsys::cs::info#extension()","rgeo::feature::polygon#exterior_ring()","rgeo::cartesian::factory()","rgeo::cartesian::boundingbox#factory()","rgeo::feature::geometry#factory()","rgeo::geographic::projectedwindow#factory()","rgeo::geos::factory()","rgeo::cartesian::factory_generator()","rgeo::geos::factory_generator()","rgeo::wkrep::wkbparser#factory_generator()","rgeo::wkrep::wktparser#factory_generator()","rgeo::geos::ffi_supported?()","rgeo::geographic::projectedwindow::for_corners()","rgeo::feature::mixincollection#for_type()","rgeo::wkrep::wkbgenerator#generate()","rgeo::wkrep::wktgenerator#generate()","rgeo::coordsys::proj4#geocentric?()","rgeo::coordsys::proj4#geographic?()","rgeo::feature::geometrycollection#geometry_n()","rgeo::feature::geometry#geometry_type()","rgeo::coordsys::srsdatabase::activerecordtable#get()","rgeo::coordsys::srsdatabase::interface#get()","rgeo::coordsys::srsdatabase::proj4data#get()","rgeo::coordsys::srsdatabase::srorg#get()","rgeo::coordsys::srsdatabase::urlreader#get()","rgeo::coordsys::cs::compoundcoordinatesystem#get_axis()","rgeo::coordsys::cs::coordinatesystem#get_axis()","rgeo::coordsys::cs::geocentriccoordinatesystem#get_axis()","rgeo::coordsys::cs::geographiccoordinatesystem#get_axis()","rgeo::coordsys::cs::localcoordinatesystem#get_axis()","rgeo::coordsys::cs::projectedcoordinatesystem#get_axis()","rgeo::coordsys::cs::verticalcoordinatesystem#get_axis()","rgeo::coordsys::proj4#get_geographic()","rgeo::coordsys::cs::projection#get_parameter()","rgeo::coordsys::cs::compoundcoordinatesystem#get_units()","rgeo::coordsys::cs::coordinatesystem#get_units()","rgeo::coordsys::cs::geocentriccoordinatesystem#get_units()","rgeo::coordsys::cs::geographiccoordinatesystem#get_units()","rgeo::coordsys::cs::localcoordinatesystem#get_units()","rgeo::coordsys::cs::projectedcoordinatesystem#get_units()","rgeo::coordsys::cs::verticalcoordinatesystem#get_units()","rgeo::coordsys::cs::geographiccoordinatesystem#get_wgs84_conversion_info()","rgeo::cartesian::boundingbox#has_m()","rgeo::geographic::factory#has_projection?()","rgeo::cartesian::boundingbox#has_z()","rgeo::cartesian::factory#hash()","rgeo::coordsys::cs::base#hash()","rgeo::geographic::factory#hash()","rgeo::geos::capifactory#hash()","rgeo::geos::capifactory#hash()","rgeo::geos::ffifactory#hash()","rgeo::geos::zmfactory#hash()","rgeo::geographic::projectedwindow#height()","rgeo::wkrep::wkbgenerator#hex_format?()","rgeo::wkrep::wkbparser#ignore_extra_bytes?()","rgeo::wkrep::wktparser#ignore_extra_tokens?()","rgeo::feature::mixincollection#include_in_class()","rgeo::feature::mixincollection::typedata#include_in_class()","rgeo::feature::mixincollection#include_in_object()","rgeo::feature::mixincollection::typedata#include_in_object()","rgeo::cartesian::boundingbox#infinitesimal?()","rgeo::coordsys::cs::base#inspect()","rgeo::geos::capifactory#inspect()","rgeo::geos::capifactory#inspect()","rgeo::geos::ffifactory#inspect()","rgeo::feature::polygon#interior_ring_n()","rgeo::feature::polygon#interior_rings()","rgeo::feature::geometry#intersection()","rgeo::feature::geometry#intersects?()","rgeo::geos::is_capi_geos?()","rgeo::feature::curve#is_closed?()","rgeo::feature::multicurve#is_closed?()","rgeo::feature::geometry#is_empty?()","rgeo::geos::is_ffi_geos?()","rgeo::geos::is_geos?()","rgeo::feature::curve#is_ring?()","rgeo::feature::geometry#is_simple?()","rgeo::feature::curve#length()","rgeo::feature::multicurve#length()","rgeo::geos::capifactory#lenient_multi_polygon_assertions?()","rgeo::geos::capifactory#lenient_multi_polygon_assertions?()","rgeo::geos::ffifactory#lenient_multi_polygon_assertions?()","rgeo::geos::zmfactory#lenient_multi_polygon_assertions?()","rgeo::cartesian::factory#line()","rgeo::feature::factory#line()","rgeo::geographic::factory#line()","rgeo::geos::capifactory#line()","rgeo::geos::capifactory#line()","rgeo::geos::ffifactory#line()","rgeo::geos::zmfactory#line()","rgeo::cartesian::factory#line_string()","rgeo::feature::factory#line_string()","rgeo::geographic::factory#line_string()","rgeo::geos::capifactory#line_string()","rgeo::geos::capifactory#line_string()","rgeo::geos::ffifactory#line_string()","rgeo::geos::zmfactory#line_string()","rgeo::cartesian::factory#linear_ring()","rgeo::feature::factory#linear_ring()","rgeo::geographic::factory#linear_ring()","rgeo::geos::capifactory#linear_ring()","rgeo::geos::capifactory#linear_ring()","rgeo::geos::ffifactory#linear_ring()","rgeo::geos::zmfactory#linear_ring()","rgeo::wkrep::wkbgenerator#little_endian?()","rgeo::feature::point#m()","rgeo::geos::zmfactory#m_factory()","rgeo::cartesian::boundingbox#m_span()","rgeo::cartesian::boundingbox#max_m()","rgeo::cartesian::boundingbox#max_point()","rgeo::cartesian::boundingbox#max_x()","rgeo::cartesian::boundingbox#max_y()","rgeo::cartesian::boundingbox#max_z()","rgeo::coordsys::cs::linearunit#meters_per_unit()","rgeo::cartesian::boundingbox#min_m()","rgeo::cartesian::boundingbox#min_point()","rgeo::cartesian::boundingbox#min_x()","rgeo::cartesian::boundingbox#min_y()","rgeo::cartesian::boundingbox#min_z()","rgeo::cartesian::factory#multi_line_string()","rgeo::feature::factory#multi_line_string()","rgeo::geographic::factory#multi_line_string()","rgeo::geos::capifactory#multi_line_string()","rgeo::geos::capifactory#multi_line_string()","rgeo::geos::ffifactory#multi_line_string()","rgeo::geos::zmfactory#multi_line_string()","rgeo::cartesian::factory#multi_point()","rgeo::feature::factory#multi_point()","rgeo::geographic::factory#multi_point()","rgeo::geos::capifactory#multi_point()","rgeo::geos::capifactory#multi_point()","rgeo::geos::ffifactory#multi_point()","rgeo::geos::zmfactory#multi_point()","rgeo::cartesian::factory#multi_polygon()","rgeo::feature::factory#multi_polygon()","rgeo::geographic::factory#multi_polygon()","rgeo::geos::capifactory#multi_polygon()","rgeo::geos::capifactory#multi_polygon()","rgeo::geos::ffifactory#multi_polygon()","rgeo::geos::zmfactory#multi_polygon()","rgeo::geographic::projectedwindow#ne_point()","rgeo::cartesian::boundingbox::new()","rgeo::cartesian::factory::new()","rgeo::coordsys::proj4::new()","rgeo::coordsys::srsdatabase::activerecordtable::new()","rgeo::coordsys::srsdatabase::entry::new()","rgeo::coordsys::srsdatabase::proj4data::new()","rgeo::coordsys::srsdatabase::srorg::new()","rgeo::coordsys::srsdatabase::urlreader::new()","rgeo::feature::mixincollection::new()","rgeo::geographic::projectedwindow::new()","rgeo::geos::capifactory::new()","rgeo::geos::capifactory::new()","rgeo::geos::ffifactory::new()","rgeo::wkrep::wkbgenerator::new()","rgeo::wkrep::wkbparser::new()","rgeo::wkrep::wktgenerator::new()","rgeo::wkrep::wktparser::new()","rgeo::coordsys::cs::geographiccoordinatesystem#num_conversion_to_wgs84()","rgeo::feature::geometrycollection#num_geometries()","rgeo::feature::polygon#num_interior_rings()","rgeo::coordsys::cs::projection#num_parameters()","rgeo::feature::linestring#num_points()","rgeo::geographic::projectedwindow#nw_point()","rgeo::coordsys::proj4#original_str()","rgeo::feature::geometry#overlaps?()","rgeo::feature::factory#override_cast()","rgeo::geos::capifactory#override_cast()","rgeo::geos::capifactory#override_cast()","rgeo::geos::ffifactory#override_cast()","rgeo::geos::zmfactory#override_cast()","rgeo::wkrep::wkbparser#parse()","rgeo::wkrep::wktparser#parse()","rgeo::wkrep::wkbparser#parse_hex()","rgeo::cartesian::factory#parse_wkb()","rgeo::feature::factory#parse_wkb()","rgeo::geographic::factory#parse_wkb()","rgeo::geos::capifactory#parse_wkb()","rgeo::geos::capifactory#parse_wkb()","rgeo::geos::ffifactory#parse_wkb()","rgeo::geos::zmfactory#parse_wkb()","rgeo::cartesian::factory#parse_wkt()","rgeo::feature::factory#parse_wkt()","rgeo::geographic::factory#parse_wkt()","rgeo::geos::capifactory#parse_wkt()","rgeo::geos::capifactory#parse_wkt()","rgeo::geos::ffifactory#parse_wkt()","rgeo::geos::zmfactory#parse_wkt()","rgeo::cartesian::factory#point()","rgeo::feature::factory#point()","rgeo::geographic::factory#point()","rgeo::geos::capifactory#point()","rgeo::geos::capifactory#point()","rgeo::geos::ffifactory#point()","rgeo::geos::zmfactory#point()","rgeo::feature::linestring#point_n()","rgeo::feature::multisurface#point_on_surface()","rgeo::feature::surface#point_on_surface()","rgeo::feature::linestring#points()","rgeo::cartesian::factory#polygon()","rgeo::feature::factory#polygon()","rgeo::geographic::factory#polygon()","rgeo::geos::capifactory#polygon()","rgeo::geos::capifactory#polygon()","rgeo::geos::ffifactory#polygon()","rgeo::geos::zmfactory#polygon()","rgeo::cartesian::preferred_factory()","rgeo::cartesian::preferred_factory_generator()","rgeo::cartesian::factory#proj4()","rgeo::feature::factory#proj4()","rgeo::geographic::factory#proj4()","rgeo::geos::capifactory#proj4()","rgeo::geos::capifactory#proj4()","rgeo::geos::ffifactory#proj4()","rgeo::geos::zmfactory#proj4()","rgeo::geographic::factory#project()","rgeo::geographic::projected_factory()","rgeo::geographic::factory#projection_factory()","rgeo::geographic::factory#projection_limits_window()","rgeo::geographic::factory#projection_wraps?()","rgeo::cartesian::factory#property()","rgeo::feature::factory#property()","rgeo::geographic::factory#property()","rgeo::geos::capifactory#property()","rgeo::geos::capifactory#property()","rgeo::geos::ffifactory#property()","rgeo::geos::zmfactory#property()","rgeo::coordsys::proj4#radians?()","rgeo::coordsys::cs::angularunit#radians_per_unit()","rgeo::geographic::projectedwindow#random_point()","rgeo::feature::geometry#relate()","rgeo::feature::geometry#relate?()","rgeo::feature::geometry#rep_equals?()","rgeo::cartesian::analysis::ring_direction()","rgeo::geographic::projectedwindow#scaled_by()","rgeo::geographic::projectedwindow#se_point()","rgeo::cartesian::simple_factory()","rgeo::cartesian::simple_factory_generator()","rgeo::geographic::simple_mercator_factory()","rgeo::feature::factorygenerator::single()","rgeo::feature::geometrycollection#size()","rgeo::geographic::spherical_factory()","rgeo::wkrep::wktgenerator#square_brackets?()","rgeo::cartesian::factory#srid()","rgeo::feature::geometry#srid()","rgeo::geographic::factory#srid()","rgeo::geos::capifactory#srid()","rgeo::geos::capifactory#srid()","rgeo::geos::ffifactory#srid()","rgeo::geos::zmfactory#srid()","rgeo::feature::curve#start_point()","rgeo::wkrep::wktparser#strict_wkt11?()","rgeo::cartesian::boundingbox#subdivide()","rgeo::feature::type#subtype_of?()","rgeo::feature::type#supertype()","rgeo::wkrep::wkbparser#support_ewkb?()","rgeo::wkrep::wktparser#support_ewkt?()","rgeo::wkrep::wkbparser#support_wkb12?()","rgeo::wkrep::wktparser#support_wkt12?()","rgeo::coordsys::proj4::supported?()","rgeo::geos::supported?()","rgeo::geographic::projectedwindow::surrounding_point()","rgeo::geographic::projectedwindow#sw_point()","rgeo::feature::geometry#sym_difference()","rgeo::wkrep::wktgenerator#tag_format()","rgeo::cartesian::boundingbox#to_geometry()","rgeo::coordsys::cs::base#to_s()","rgeo::feature::type#to_s()","rgeo::coordsys::cs::base#to_wkt()","rgeo::feature::geometry#touches?()","rgeo::coordsys::proj4::transform()","rgeo::coordsys::proj4::transform_coords()","rgeo::wkrep::wkbgenerator#type_format()","rgeo::wkrep::wktgenerator#type_format()","rgeo::feature::type#type_name()","rgeo::feature::geometry#union()","rgeo::geographic::factory#unproject()","rgeo::coordsys::proj4::version()","rgeo::geos::version()","rgeo::coordsys::proj4::version_string()","rgeo::geos::version_string()","rgeo::geographic::projectedwindow#width()","rgeo::geographic::projectedwindow#with_margin()","rgeo::feature::geometry#within?()","rgeo::geos::ffifactory#wrap_fg_geom()","rgeo::feature::point#x()","rgeo::geographic::projectedwindow#x_max()","rgeo::geographic::projectedwindow#x_min()","rgeo::cartesian::boundingbox#x_span()","rgeo::geographic::projectedwindow#x_span()","rgeo::feature::point#y()","rgeo::geographic::projectedwindow#y_max()","rgeo::geographic::projectedwindow#y_min()","rgeo::cartesian::boundingbox#y_span()","rgeo::geographic::projectedwindow#y_span()","rgeo::yaml_supported?()","rgeo::feature::point#z()","rgeo::geos::zmfactory#z_factory()","rgeo::cartesian::boundingbox#z_span()","","",""],"info":[["RGeo","","RGeo.html","","<p>RGeo is a spatial data library for Ruby. It focuses on the storage and\nmanipulation of spatial data types …\n"],["RGeo::Cartesian","","RGeo/Cartesian.html","","<p>The Cartesian module is a gateway to implementations that use the Cartesian\n(i.e. flat) coordinate system. …\n"],["RGeo::Cartesian::Analysis","","RGeo/Cartesian/Analysis.html","","<p>This provides includes some spatial analysis algorithms supporting\nCartesian data.\n"],["RGeo::Cartesian::BoundingBox","","RGeo/Cartesian/BoundingBox.html","","<p>This is a bounding box for Cartesian data. The simple cartesian\nimplementation uses this internally to …\n"],["RGeo::Cartesian::Factory","","RGeo/Cartesian/Factory.html","","<p>This class implements the factory for the simple cartesian implementation.\n"],["RGeo::CoordSys","","RGeo/CoordSys.html","","<p>This module provides data structures and tools related to coordinate\nsystems and coordinate transforms. …\n"],["RGeo::CoordSys::CS","","RGeo/CoordSys/CS.html","","<p>This module contains an implementation of the CS (coordinate systems)\npackage of the OGC Coordinate  …\n"],["RGeo::CoordSys::CS::AngularUnit","","RGeo/CoordSys/CS/AngularUnit.html","","<p>OGC spec description\n<p>Definition of angular units.\n"],["RGeo::CoordSys::CS::AxisInfo","","RGeo/CoordSys/CS/AxisInfo.html","","<p>OGC spec description\n<p>Details of axis. This is used to label axes, and indicate the orientation.\n"],["RGeo::CoordSys::CS::Base","","RGeo/CoordSys/CS/Base.html","","<p>This is a base class for all OGC coordinate system objects. This includes\nboth interfaces and data types …\n"],["RGeo::CoordSys::CS::CompoundCoordinateSystem","","RGeo/CoordSys/CS/CompoundCoordinateSystem.html","","<p>OGC spec description\n<p>An aggregate of two coordinate systems (CRS). One of these is usually a CRS\nbased …\n"],["RGeo::CoordSys::CS::CoordinateSystem","","RGeo/CoordSys/CS/CoordinateSystem.html","","<p>OGC spec description\n<p>Base interface for all coordinate systems.\n<p>A coordinate system is a mathematical space, …\n"],["RGeo::CoordSys::CS::CoordinateSystemFactory","","RGeo/CoordSys/CS/CoordinateSystemFactory.html","","<p>A class implementing the CS_CoordinateSystemFactory interface. It provides\nmethods for building up complex …\n"],["RGeo::CoordSys::CS::Datum","","RGeo/CoordSys/CS/Datum.html","","<p>OGC spec description\n<p>A set of quantities from which other quantities are calculated. For the OGC\nabstract …\n"],["RGeo::CoordSys::CS::Ellipsoid","","RGeo/CoordSys/CS/Ellipsoid.html","","<p>OGC spec description\n<p>An approximation of the Earth’s surface as a squashed sphere.\n"],["RGeo::CoordSys::CS::GeocentricCoordinateSystem","","RGeo/CoordSys/CS/GeocentricCoordinateSystem.html","","<p>OGC spec description\n<p>A 3D coordinate system, with its origin at the centre of the Earth. The X\naxis points …\n"],["RGeo::CoordSys::CS::GeographicCoordinateSystem","","RGeo/CoordSys/CS/GeographicCoordinateSystem.html","","<p>OGC spec description\n<p>A coordinate system based on latitude and longitude. Some geographic\ncoordinate systems …\n"],["RGeo::CoordSys::CS::HorizontalCoordinateSystem","","RGeo/CoordSys/CS/HorizontalCoordinateSystem.html","","<p>OGC spec description\n<p>A 2D coordinate system suitable for positions on the Earth’s surface.\n<p>Notes\n"],["RGeo::CoordSys::CS::HorizontalDatum","","RGeo/CoordSys/CS/HorizontalDatum.html","","<p>OGC spec description\n<p>Procedure used to measure positions on the surface of the Earth.\n"],["RGeo::CoordSys::CS::Info","","RGeo/CoordSys/CS/Info.html","","<p>OGC spec description\n<p>A base interface for metadata applicable to coordinate system objects.\n<p>The metadata …\n"],["RGeo::CoordSys::CS::LinearUnit","","RGeo/CoordSys/CS/LinearUnit.html","","<p>OGC spec description\n<p>Definition of linear units.\n"],["RGeo::CoordSys::CS::LocalCoordinateSystem","","RGeo/CoordSys/CS/LocalCoordinateSystem.html","","<p>OGC spec description\n<p>A local coordinate system, with uncertain relationship to the world. In\ngeneral, …\n"],["RGeo::CoordSys::CS::LocalDatum","","RGeo/CoordSys/CS/LocalDatum.html","","<p>OGC spec description\n<p>Local datum. If two local datum objects have the same datum type and name,\nthen they …\n"],["RGeo::CoordSys::CS::PrimeMeridian","","RGeo/CoordSys/CS/PrimeMeridian.html","","<p>OGC spec description\n<p>A meridian used to take longitude measurements from.\n"],["RGeo::CoordSys::CS::ProjectedCoordinateSystem","","RGeo/CoordSys/CS/ProjectedCoordinateSystem.html","","<p>OGC spec description\n<p>A 2D cartographic coordinate system.\n"],["RGeo::CoordSys::CS::Projection","","RGeo/CoordSys/CS/Projection.html","","<p>OGC spec description\n<p>A projection from geographic coordinates to projected coordinates.\n"],["RGeo::CoordSys::CS::ProjectionParameter","","RGeo/CoordSys/CS/ProjectionParameter.html","","<p>OGC spec description\n<p>A named projection parameter value. The linear units of parameters’ values\nmatch …\n"],["RGeo::CoordSys::CS::Unit","","RGeo/CoordSys/CS/Unit.html","","<p>OGC spec description\n<p>Base interface for defining units.\n<p>Notes\n"],["RGeo::CoordSys::CS::VerticalCoordinateSystem","","RGeo/CoordSys/CS/VerticalCoordinateSystem.html","","<p>OGC spec description\n<p>A one-dimensional coordinate system suitable for vertical measurements.\n"],["RGeo::CoordSys::CS::VerticalDatum","","RGeo/CoordSys/CS/VerticalDatum.html","","<p>OGC spec description\n<p>Procedure used to measure vertical distances.\n"],["RGeo::CoordSys::CS::WGS84ConversionInfo","","RGeo/CoordSys/CS/WGS84ConversionInfo.html","","<p>OGC spec description\n<p>Parameters for a geographic transformation into WGS84. The Bursa Wolf\nparameters …\n"],["RGeo::CoordSys::Proj4","","RGeo/CoordSys/Proj4.html","","<p>This is a Ruby wrapper around a Proj4 coordinate system. It represents a\nsingle geographic coordinate …\n"],["RGeo::CoordSys::SRSDatabase","","RGeo/CoordSys/SRSDatabase.html","","<p>This module contains tools for accessing spatial reference databases. These\nare databases (either local …\n"],["RGeo::CoordSys::SRSDatabase::ActiveRecordTable","","RGeo/CoordSys/SRSDatabase/ActiveRecordTable.html","","<p>A spatial reference database implementation that uses ActiveRecord to\naccess a spatial reference table …\n"],["RGeo::CoordSys::SRSDatabase::Entry","","RGeo/CoordSys/SRSDatabase/Entry.html","","<p>An entry in a spatial reference system database. Every entry has an\nidentifier, but all the other attributes …\n"],["RGeo::CoordSys::SRSDatabase::Interface","","RGeo/CoordSys/SRSDatabase/Interface.html","","<p>Interface specification for spatial reference system databases. This module\nexists primarily for the …\n"],["RGeo::CoordSys::SRSDatabase::Proj4Data","","RGeo/CoordSys/SRSDatabase/Proj4Data.html","","<p>A spatial reference database implementation backed by coordinate system\nfiles installed as part of the …\n"],["RGeo::CoordSys::SRSDatabase::SrOrg","","RGeo/CoordSys/SRSDatabase/SrOrg.html","","<p>A spatial reference database implementation that fetches data from the\nspatialreference.org website. …\n"],["RGeo::CoordSys::SRSDatabase::UrlReader","","RGeo/CoordSys/SRSDatabase/UrlReader.html","","<p>A spatial reference database implementation that fetches data from internet\nURLs.\n"],["RGeo::Error","","RGeo/Error.html","","<p>All RGeo errors are members of this namespace.\n"],["RGeo::Error::InvalidGeometry","","RGeo/Error/InvalidGeometry.html","","<p>The specified geometry is invalid\n"],["RGeo::Error::ParseError","","RGeo/Error/ParseError.html","","<p>Parsing failed\n"],["RGeo::Error::RGeoError","","RGeo/Error/RGeoError.html","","<p>Base class for all RGeo-related exceptions\n"],["RGeo::Error::UnsupportedOperation","","RGeo/Error/UnsupportedOperation.html","","<p>The specified operation is not supported or not implemented\n"],["RGeo::Feature","","RGeo/Feature.html","","<p>The Feature namespace contains interfaces and general tools for\nimplementations of the Open Geospatial …\n"],["RGeo::Feature::Curve","","RGeo/Feature/Curve.html","","<p>SFS 1.1 Description\n<p>A Curve is a 1-dimensional geometric object usually stored as a sequence of\nPoints …\n"],["RGeo::Feature::Factory","","RGeo/Feature/Factory.html","","<p>This is a standard interface for factories of features. Generally, each\nFeature implementation will implement …\n"],["RGeo::Feature::Factory::Instance","","RGeo/Feature/Factory/Instance.html","","<p>All factory implementations MUST include this submodule. This serves as a\nmarker that may be used to …\n"],["RGeo::Feature::FactoryGenerator","","RGeo/Feature/FactoryGenerator.html","","<p>A FactoryGenerator is a callable object (usually a Proc) that takes a\nconfiguration as a hash and returns …\n"],["RGeo::Feature::Geometry","","RGeo/Feature/Geometry.html","","<p>SFS 1.1 Description\n<p>Geometry is the root class of the hierarchy. Geometry is an abstract\n(non-instantiable) …\n"],["RGeo::Feature::GeometryCollection","","RGeo/Feature/GeometryCollection.html","","<p>SFS 1.1 Description\n<p>A GeometryCollection is a geometric object that is a collection of 1 or\nmore geometric …\n"],["RGeo::Feature::Instance","","RGeo/Feature/Instance.html","","<p>All geometry implementations MUST include this submodule. This serves as a\nmarker that may be used to …\n"],["RGeo::Feature::Line","","RGeo/Feature/Line.html","","<p>SFS 1.1 Description\n<p>A Line is a LineString with exactly 2 Points.\n<p>Notes\n"],["RGeo::Feature::LineString","","RGeo/Feature/LineString.html","","<p>SFS 1.1 Description\n<p>A LineString is a Curve with linear interpolation between Points. Each\nconsecutive …\n"],["RGeo::Feature::LinearRing","","RGeo/Feature/LinearRing.html","","<p>SFS 1.1 Description\n<p>A LinearRing is a LineString that is both closed and simple.\n<p>Notes\n"],["RGeo::Feature::MixinCollection","","RGeo/Feature/MixinCollection.html","","<p>MixinCollection is a mechanism for adding arbitrary methods to geometry\nobjects.\n<p>Normally, geometry objects …\n"],["RGeo::Feature::MixinCollection::TypeData","","RGeo/Feature/MixinCollection/TypeData.html","","<p>An API point controlling a particular type.\n"],["RGeo::Feature::MultiCurve","","RGeo/Feature/MultiCurve.html","","<p>SFS 1.1 Description\n<p>A MultiCurve is a 1-dimensional GeometryCollection whose elements are\nCurves.\n<p>MultiCurve …\n"],["RGeo::Feature::MultiLineString","","RGeo/Feature/MultiLineString.html","","<p>SFS 1.1 Description\n<p>A MultiLineString is a MultiCurve whose elements are LineStrings.\n<p>Notes\n"],["RGeo::Feature::MultiPoint","","RGeo/Feature/MultiPoint.html","","<p>SFS 1.1 Description\n<p>A MultiPoint is a 0-dimensional GeometryCollection. The elements of a\nMultiPoint are …\n"],["RGeo::Feature::MultiPolygon","","RGeo/Feature/MultiPolygon.html","","<p>SFS 1.1 Description\n<p>A MultiPolygon is a MultiSurface whose elements are Polygons.\n<p>The assertions for MultiPolygons …\n"],["RGeo::Feature::MultiSurface","","RGeo/Feature/MultiSurface.html","","<p>SFS 1.1 Description\n<p>A MultiSurface is a 2-dimensional GeometryCollection whose elements are\nSurfaces. …\n"],["RGeo::Feature::Point","","RGeo/Feature/Point.html","","<p>SFS 1.1 Description\n<p>A Point is a 0-dimensional geometric object and represents a single\nlocation in coordinate …\n"],["RGeo::Feature::Polygon","","RGeo/Feature/Polygon.html","","<p>SFS 1.1 Description\n<p>A Polygon is a planar Surface defined by 1 exterior boundary and 0 or more\ninterior …\n"],["RGeo::Feature::Surface","","RGeo/Feature/Surface.html","","<p>SFS 1.1 Description\n<p>A Surface is a 2-dimensional geometric object.\n<p>A simple Surface consists of a single …\n"],["RGeo::Feature::Type","","RGeo/Feature/Type.html","","<p>This module provides the API for geometry type objects. Technically these\nobjects are modules (such as …\n"],["RGeo::Geographic","","RGeo/Geographic.html","","<p>The Geographic implementation actually comprises a suite of implementations\nwith one common feature: …\n"],["RGeo::Geographic::Factory","","RGeo/Geographic/Factory.html","","<p>This class implements the various factories for geography features. See\nmethods of the RGeo::Geographic …\n"],["RGeo::Geographic::ProjectedWindow","","RGeo/Geographic/ProjectedWindow.html","","<p>This object represents an axis-aligned rectangle in a map projection\ncoordinate system. It is commonly …\n"],["RGeo::Geos","","RGeo/Geos.html","","<p>The Geos module provides general tools for creating and manipulating a\nGEOS-backed implementation of …\n"],["RGeo::Geos::CAPIFactory","","RGeo/Geos/CAPIFactory.html","","<p>This the GEOS CAPI implementation of ::RGeo::Feature::Factory.\n"],["RGeo::Geos::FFIFactory","","RGeo/Geos/FFIFactory.html","","<p>This the FFI-GEOS implementation of ::RGeo::Feature::Factory.\n"],["RGeo::Geos::Factory","","RGeo/Geos/CAPIFactory.html","","<p>This the GEOS CAPI implementation of ::RGeo::Feature::Factory.\n"],["RGeo::Geos::ZMFactory","","RGeo/Geos/ZMFactory.html","","<p>A factory for Geos that handles both Z and M.\n"],["RGeo::WKRep","","RGeo/WKRep.html","","<p>This module contains implementations of the OpenGIS well-known\nrepresentations: the WKT (well-known text …\n"],["RGeo::WKRep::WKBGenerator","","RGeo/WKRep/WKBGenerator.html","","<p>This class provides the functionality of serializing a geometry as WKB\n(well-known binary) format. You …\n"],["RGeo::WKRep::WKBParser","","RGeo/WKRep/WKBParser.html","","<p>This class provides the functionality of parsing a geometry from WKB\n(well-known binary) format. You …\n"],["RGeo::WKRep::WKTGenerator","","RGeo/WKRep/WKTGenerator.html","","<p>This class provides the functionality of serializing a geometry as WKT\n(well-known text) format. You …\n"],["RGeo::WKRep::WKTParser","","RGeo/WKRep/WKTParser.html","","<p>This class provides the functionality of parsing a geometry from WKT\n(well-known text) format. You may …\n"],["*","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-2A","(rhs_)","<p>If the given rhs is a geometry object, this operator must behave the same\nas the intersection method. …\n"],["*","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-2A","(x_factor_, y_factor_=nil)",""],["+","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-2B","(rhs_)","<p>If the given rhs is a geometry object, this operator must behave the same\nas the union method. The behavior …\n"],["-","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-2D","(rhs_)","<p>If the given rhs is a geometry object, this operator must behave the same\nas the difference method.  …\n"],["==","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-3D-3D","(rhs_)",""],["==","RGeo::CoordSys::CS::Base","RGeo/CoordSys/CS/Base.html#method-i-3D-3D","(rhs_)",""],["==","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-3D-3D","(rhs_)",""],["==","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-3D-3D","(rhs_)","<p>This operator should behave almost the same as the equals? method, with two\nkey differences.\n<p>First, the …\n"],["==","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-3D-3D","(rhs_)",""],["==","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-3D-3D","(rhs_)",""],["==","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-3D-3D","(rhs_)",""],["==","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-3D-3D","(rhs_)",""],["==","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-3D-3D","(rhs_)",""],["===","RGeo::Feature::Type","RGeo/Feature/Type.html#method-i-3D-3D-3D","(rhs_)",""],["[]","RGeo::Feature::GeometryCollection","RGeo/Feature/GeometryCollection.html#method-i-5B-5D","(n_)","<p>Returns the Nth geometry in this GeometryCollection, or nil if the given N\nis out of range. N is zero-based. …\n"],["add","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-add","(geometry_)","<p>Adjusts the extents of this bounding box to encompass the given object,\nwhich may be a geometry or another …\n"],["add","RGeo::Feature::MixinCollection","RGeo/Feature/MixinCollection.html#method-i-add","(type_, module_)","<p>Add a module connected to the given type.\n<p>Shorthand for:\n\n<pre>for_type(type_).add(module_)</pre>\n"],["add","RGeo::Feature::MixinCollection::TypeData","RGeo/Feature/MixinCollection/TypeData.html#method-i-add","(module_)","<p>Add a mixin to be included in implementations of this type.\n"],["area","RGeo::Feature::MultiSurface","RGeo/Feature/MultiSurface.html#method-i-area","()","<p>SFS 1.1 Description\n<p>The area of this MultiSurface, as measured in the spatial reference system\nof this …\n"],["area","RGeo::Feature::Surface","RGeo/Feature/Surface.html#method-i-area","()","<p>SFS 1.1 Description\n<p>The area of this Surface, as measured in the spatial reference system of\nthis Surface …\n"],["as_binary","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-as_binary","()","<p>SFS 1.1 Description\n<p>Exports this geometric object to a specific Well-known Binary\nRepresentation of Geometry …\n"],["as_text","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-as_text","()","<p>SFS 1.1 Description\n<p>Exports this geometric object to a specific Well-known Text Representation\nof Geometry …\n"],["boundary","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-boundary","()","<p>SFS 1.1 Description\n<p>Returns the closure of the combinatorial boundary of this geometric object.\nBecause …\n"],["bounding_points","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-c-bounding_points","(points_)","<p>Creates a new window that contains all of the given points. which must be\nFeature::Point objects in unprojected …\n"],["buffer","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-buffer","(distance_)","<p>SFS 1.1 Description\n<p>Returns a geometric object that represents all Points whose distance from\nthis geometric …\n"],["buffer_resolution","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-buffer_resolution","()","<p>Returns the resolution used by buffer calculations on geometries created by\nthis factory\n"],["buffer_resolution","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-buffer_resolution","()","<p>Returns the resolution used by buffer calculations on geometries created by\nthis factory\n"],["buffer_resolution","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-buffer_resolution","()","<p>Returns the resolution used by buffer calculations on geometries created by\nthis factory\n"],["buffer_resolution","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-buffer_resolution","()","<p>Returns the resolution used by buffer calculations on geometries created by\nthis factory\n"],["call","RGeo::Feature::FactoryGenerator","RGeo/Feature/FactoryGenerator.html#method-i-call","(config_={})","<p>Generate a factory given a configuration as a hash.\n<p>If the generator does not recognize or does not support …\n"],["canonical_hash","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-canonical_hash","()","<p>Returns the “canonical” hash definition for this coordinate system, as\nreported by Proj4.  …\n"],["canonical_str","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-canonical_str","()","<p>Returns the “canonical” string definition for this coordinate system, as\nreported by Proj4 …\n"],["capi_supported?","RGeo::Geos","RGeo/Geos.html#method-c-capi_supported-3F","()","<p>Returns true if the CAPI GEOS implementation is supported.\n"],["cast","RGeo::Feature","RGeo/Feature.html#method-c-cast","(obj_, *params_)","<p>Cast the given object according to the given parameters, if possible, and\nreturn the resulting object. …\n"],["center_m","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-center_m","()","<p>Returns the midpoint M, or nil if this bounding box is empty or has no M.\n"],["center_point","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-center_point","()","<p>Returns the center of the rectangle in <em>unprojected</em> (lat/lng)\nspace, as a Feature::Point object.\n"],["center_x","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-center_x","()","<p>Returns the midpoint X, or nil if this bounding box is empty.\n"],["center_xy","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-center_xy","()","<p>Returns a two-element array containing the x and y coordinates of the\ncenter of the rectangle.\n"],["center_y","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-center_y","()","<p>Returns the midpoint Y, or nil if this bounding box is empty.\n"],["center_z","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-center_z","()","<p>Returns the midpoint Z, or nil if this bounding box is empty or has no Z.\n"],["centroid","RGeo::Feature::MultiSurface","RGeo/Feature/MultiSurface.html#method-i-centroid","()","<p>SFS 1.1 Description\n<p>The mathematical centroid for this MultiSurface as a Point. The result is\nnot guaranteed …\n"],["centroid","RGeo::Feature::Surface","RGeo/Feature/Surface.html#method-i-centroid","()","<p>SFS 1.1 Description\n<p>The mathematical centroid for this Surface as a Point. The result is not\nguaranteed …\n"],["check_type","RGeo::Feature::Type","RGeo/Feature/Type.html#method-i-check_type","(rhs_)","<p>Returns true if the given object is this type or a subtype thereof, or if\nit is a feature object whose …\n"],["clamped_by","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-clamped_by","(min_width_, min_height_, max_width_, max_height_)","<p>Returns a new window resulting from clamping this window to the given\nminimum and maximum widths and …\n"],["clear_cache","RGeo::CoordSys::SRSDatabase::ActiveRecordTable","RGeo/CoordSys/SRSDatabase/ActiveRecordTable.html#method-i-clear_cache","()","<p>Clears the cache if a cache is active.\n"],["clear_cache","RGeo::CoordSys::SRSDatabase::Interface","RGeo/CoordSys/SRSDatabase/Interface.html#method-i-clear_cache","()","<p>Clears any cache utilized by this database.\n"],["clear_cache","RGeo::CoordSys::SRSDatabase::Proj4Data","RGeo/CoordSys/SRSDatabase/Proj4Data.html#method-i-clear_cache","()","<p>Clear the cache if one exists.\n"],["clear_cache","RGeo::CoordSys::SRSDatabase::SrOrg","RGeo/CoordSys/SRSDatabase/SrOrg.html#method-i-clear_cache","()","<p>Clear the cache if one exists.\n"],["clear_cache","RGeo::CoordSys::SRSDatabase::UrlReader","RGeo/CoordSys/SRSDatabase/UrlReader.html#method-i-clear_cache","()","<p>Clear the cache if one is present.\n"],["collection","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-collection","(elems_)","<p>See ::RGeo::Feature::Factory#collection\n"],["collection","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-collection","(elems_)","<p>Create a feature of type GeometryCollection. The elems should be an\nEnumerable of Geometry objects.\n<p>Although …\n"],["collection","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-collection","(elems_)","<p>See ::RGeo::Feature::Factory#collection\n"],["collection","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-collection","(elems_)","<p>See ::RGeo::Feature::Factory#collection\n"],["collection","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-collection","(elems_)","<p>See ::RGeo::Feature::Factory#collection\n"],["collection","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-collection","(elems_)","<p>See ::RGeo::Feature::Factory#collection\n"],["collection","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-collection","(elems_)","<p>See ::RGeo::Feature::Factory#collection\n"],["contains?","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-contains-3F","(rhs_, opts_={})","<p>Returns true if this bounding box contains the given object, which may be a\ngeometry or another bounding …\n"],["contains?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-contains-3F","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object “spatially contains”\nanother_geometry. …\n"],["contains_point?","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-contains_point-3F","(point_)","<p>Returns true if the rectangle contains the given point, which must be a\nFeature::Point in <em>unprojected</em> …\n"],["contains_window?","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-contains_window-3F","(window_)","<p>Returns true if the given window is completely contained within this\nwindow.\n"],["convert_case","RGeo::WKRep::WKTGenerator","RGeo/WKRep/WKTGenerator.html#method-i-convert_case","()","<p>Returns the case for output. See WKTGenerator for details.\n"],["convex_hull","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-convex_hull","()","<p>SFS 1.1 Description\n<p>Returns a geometric object that represents the convex hull of this\ngeometric object. …\n"],["coord_sys","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-coord_sys","()","<p>See ::RGeo::Feature::Factory#coord_sys\n"],["coord_sys","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-coord_sys","()","<p>Returns the coordinate system specification for the features created by\nthis factory, or nil if there …\n"],["coord_sys","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-coord_sys","()","<p>See ::RGeo::Feature::Factory#coord_sys\n"],["coord_sys","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-coord_sys","()","<p>See ::RGeo::Feature::Factory#coord_sys\n"],["coord_sys","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-coord_sys","()","<p>See ::RGeo::Feature::Factory#coord_sys\n"],["coord_sys","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-coord_sys","()","<p>See ::RGeo::Feature::Factory#coord_sys\n"],["coord_sys","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-coord_sys","()","<p>See ::RGeo::Feature::Factory#coord_sys\n"],["create","RGeo::CoordSys::CS::AngularUnit","RGeo/CoordSys/CS/AngularUnit.html#method-c-create","(name_, radians_per_unit_, *optional_)","<p>Create an AngularUnit given a unit name and a conversion factor in radians\nper unit. You may also provide …\n"],["create","RGeo::CoordSys::CS::AxisInfo","RGeo/CoordSys/CS/AxisInfo.html#method-c-create","(name_, orientation_)","<p>Creates an AxisInfo. you must pass the human readable name for the axis\n(e.g. “X”, “Y”, …\n"],["create","RGeo::CoordSys::CS::CompoundCoordinateSystem","RGeo/CoordSys/CS/CompoundCoordinateSystem.html#method-c-create","(name_, head_, tail_, *optional_)","<p>Create a CompoundCoordinateSystem given two sub-coordinate systems. You may\nalso provide the optional …\n"],["create","RGeo::CoordSys::CS::Ellipsoid","RGeo/CoordSys/CS/Ellipsoid.html#method-c-create","(name_, semi_major_axis_, semi_minor_axis_, inverse_flattening_, ivf_definitive_, linear_unit_, *optional_)","<p>Create an Ellipsoid given a name, semi-major and semi-minor axes, the\ninverse flattening, a boolean indicating …\n"],["create","RGeo::CoordSys::CS::GeocentricCoordinateSystem","RGeo/CoordSys/CS/GeocentricCoordinateSystem.html#method-c-create","(name_, horizontal_datum_, prime_meridian_, linear_unit_, axis0_, axis1_, axis2_, *optional_)","<p>Create a GeocentricCoordinateSystem given a name, a HorizontalDatum, a\nPrimeMeridian, a LinearUnit, and …\n"],["create","RGeo::CoordSys::CS::GeographicCoordinateSystem","RGeo/CoordSys/CS/GeographicCoordinateSystem.html#method-c-create","(name_, angular_unit_, horizontal_datum_, prime_meridian_, axis0_, axis1_, *optional_)","<p>Create a GeographicCoordinateSystem, given a name, an AngularUnit, a\nHorizontalDatum, a PrimeMeridian …\n"],["create","RGeo::CoordSys::CS::HorizontalDatum","RGeo/CoordSys/CS/HorizontalDatum.html#method-c-create","(name_, datum_type_, ellipsoid_, wgs84_parameters_, *optional_)","<p>Create a HorizontalDatum given a name, datum type code, Ellipsoid, and\nWGS84ConversionInfo. The WGS84ConversionInfo …\n"],["create","RGeo::CoordSys::CS::LinearUnit","RGeo/CoordSys/CS/LinearUnit.html#method-c-create","(name_, meters_per_unit_, *optional_)","<p>Create a LinearUnit given a unit name and a conversion factor in meters per\nunit. You may also provide …\n"],["create","RGeo::CoordSys::CS::LocalCoordinateSystem","RGeo/CoordSys/CS/LocalCoordinateSystem.html#method-c-create","(name_, local_datum_, unit_, axes_, *optional_)","<p>Create a LocalCoordinateSystem given a name, a LocalDatum, a Unit, and an\narray of at least one AxisInfo …\n"],["create","RGeo::CoordSys::CS::LocalDatum","RGeo/CoordSys/CS/LocalDatum.html#method-c-create","(name_, datum_type_, *optional_)","<p>Create a LocalDatum given a name and a datum type code. You may also\nprovide the optional parameters …\n"],["create","RGeo::CoordSys::CS::PrimeMeridian","RGeo/CoordSys/CS/PrimeMeridian.html#method-c-create","(name_, angular_unit_, longitude_, *optional_)","<p>Create a PrimeMeridian given a name, AngularUnits, and the longitude\nrelative to the Greenwich Meridian …\n"],["create","RGeo::CoordSys::CS::ProjectedCoordinateSystem","RGeo/CoordSys/CS/ProjectedCoordinateSystem.html#method-c-create","(name_, geographic_coordinate_system_, projection_, linear_unit_, axis0_, axis1_, *optional_)","<p>Create a ProjectedCoordinateSystem given a name, a\nGeographicCoordinateSystem, and Projection, a LinearUnit …\n"],["create","RGeo::CoordSys::CS::Projection","RGeo/CoordSys/CS/Projection.html#method-c-create","(name_, class_name_, parameters_, *optional_)","<p>Create a Projection given a name, a projection class, and an array of\nProjectionParameter. You may also …\n"],["create","RGeo::CoordSys::CS::ProjectionParameter","RGeo/CoordSys/CS/ProjectionParameter.html#method-c-create","(name_, value_)","<p>Create a parameter given the name and value.\n"],["create","RGeo::CoordSys::CS::Unit","RGeo/CoordSys/CS/Unit.html#method-c-create","(name_, conversion_factor_, *optional_)","<p>Create a bare Unit that does not specify whether it is a LinearUnit or an\nAngularUnit, given a unit name …\n"],["create","RGeo::CoordSys::CS::VerticalCoordinateSystem","RGeo/CoordSys/CS/VerticalCoordinateSystem.html#method-c-create","(name_, vertical_datum_, vertical_unit_, axis_, *optional_)","<p>Create a VerticalCoordinateSystem given a name, a VerticalDatum, a\nLinearUnit, and an AxisInfo. The  …\n"],["create","RGeo::CoordSys::CS::VerticalDatum","RGeo/CoordSys/CS/VerticalDatum.html#method-c-create","(name_, datum_type_, *optional_)","<p>Create a VerticalDatum given a name and a datum type code. You may also\nprovide the optional parameters …\n"],["create","RGeo::CoordSys::CS::WGS84ConversionInfo","RGeo/CoordSys/CS/WGS84ConversionInfo.html#method-c-create","(dx_, dy_, dz_, ex_, ey_, ez_, ppm_)","<p>Create the horizontal datum shift transformation into WGS84, given the\nseven Bursa Wolf parameters.  …\n"],["create","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-c-create","(defn_, opts_={})","<p>Create a new Proj4 object, given a definition, which may be either a string\nor a hash. Returns nil if …\n"],["create","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-c-create","(opts_={})","<p>Create a new factory. Returns nil if the GEOS CAPI implementation is not\nsupported.\n<p>See ::RGeo::Geos.factory …\n"],["create","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-c-create","(opts_={})","<p>Create a new factory. Returns nil if the GEOS CAPI implementation is not\nsupported.\n<p>See ::RGeo::Geos.factory …\n"],["create","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-c-create","(opts_={})","<p>Create a new factory. Returns nil if the GEOS implementation is not\nsupported.\n"],["create_compound_coordinate_system","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_compound_coordinate_system","(name_, head_, tail_)","<p>Create a CompoundCoordinateSystem from a name, and two constituent\ncoordinate systems.\n"],["create_ellipsoid","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_ellipsoid","(name_, semi_major_axis_, semi_minor_axis_, linear_unit_)","<p>Create an Ellipsoid from a name, semi-major axis, and semi-minor axis. You\ncan also provide a LinearUnit …\n"],["create_ellipsoid","RGeo::CoordSys::CS::Ellipsoid","RGeo/CoordSys/CS/Ellipsoid.html#method-c-create_ellipsoid","(name_, semi_major_axis_, semi_minor_axis_, linear_unit_, *optional_)","<p>Create an Ellipsoid given a name, semi-major and semi-minor axes, and the\nLinearUnit indicating the axis …\n"],["create_flattened_sphere","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_flattened_sphere","(name_, semi_major_axis_, inverse_flattening_, linear_unit_)","<p>Create an Ellipsoid from a name, semi-major axis, and an inverse flattening\nfactor. You can also provide …\n"],["create_flattened_sphere","RGeo::CoordSys::CS::Ellipsoid","RGeo/CoordSys/CS/Ellipsoid.html#method-c-create_flattened_sphere","(name_, semi_major_axis_, inverse_flattening_, linear_unit_, *optional_)","<p>Create an Ellipsoid given a name, semi-major axis, inverse flattening, and\nthe LinearUnit indicating …\n"],["create_from_geometry","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-c-create_from_geometry","(geom_, opts_={})","<p>Create a bounding box given a geometry to surround. The bounding box will\nbe given the factory of the …\n"],["create_from_points","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-c-create_from_points","(point1_, point2_, opts_={})","<p>Create a bounding box given two corner points. The bounding box will be\ngiven the factory of the first …\n"],["create_from_wkt","RGeo::CoordSys::CS","RGeo/CoordSys/CS.html#method-c-create_from_wkt","(str_)","<p>Parsees OGC WKT format and returns the object created. Raises\nError::ParseError if a syntax error is …\n"],["create_from_wkt","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_from_wkt","(str_)","<p>Create any object given the OGC WKT format. Raises Error::ParseError if a\nsyntax error is encounterred. …\n"],["create_geographic_coordinate_system","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_geographic_coordinate_system","(name_, angular_unit_, horizontal_datum_, prime_meridian_, axis0_, axis1_)","<p>Create a GeographicCoordinateSystem, given a name, an AngularUnit, a\nHorizontalDatum, a PrimeMeridian …\n"],["create_horizontal_datum","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_horizontal_datum","(name_, horizontal_datum_type_, ellipsoid_, to_wgs84_)","<p>Create a HorizontalDatum given a name, a horizontal datum type code, an\nEllipsoid, and a WGS84ConversionInfo …\n"],["create_local_coordinate_system","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_local_coordinate_system","(name_, datum_, unit_, axes_)","<p>Create a LocalCoordinateSystem given a name, a LocalDatum, a Unit, and an\narray of at least one AxisInfo …\n"],["create_local_datum","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_local_datum","(name_, local_datum_type_)","<p>Create a LocalDatum given a name and a local datum type code.\n"],["create_prime_meridian","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_prime_meridian","(name_, angular_unit_, longitude_)","<p>Create a PrimeMeridian given a name, an AngularUnit, and a longitude\noffset.\n"],["create_projected_coordinate_system","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_projected_coordinate_system","(name_, gcs_, projection_, linear_unit_, axis0_, axis1_)","<p>Create a ProjectedCoordinateSystem given a name, a\nGeographicCoordinateSystem, and Projection, a LinearUnit …\n"],["create_projection","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_projection","(name_, wkt_projection_class_, parameters_)","<p>Create a Projection given a name, a projection class, and an array of\nProjectionParameter.\n"],["create_vertical_coordinate_system","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_vertical_coordinate_system","(name_, vertical_datum_, vertical_unit_, axis_)","<p>Create a VerticalCoordinateSystem given a name, a VerticalDatum, a\nVerticalUnit, and an AxisInfo. The …\n"],["create_vertical_datum","RGeo::CoordSys::CS::CoordinateSystemFactory","RGeo/CoordSys/CS/CoordinateSystemFactory.html#method-i-create_vertical_datum","(name_, vertical_datum_type_)","<p>Create a VerticalDatum given a name ane a datum type code.\n"],["crosses?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-crosses-3F","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object “spatially crosses” another_geometry.\n…\n"],["crosses_seam?","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-crosses_seam-3F","()","<p>Returns true if the projection wraps along the x axis, and this rectangle\ncrosses that seam.\n"],["decorate","RGeo::Feature::FactoryGenerator","RGeo/Feature/FactoryGenerator.html#method-c-decorate","(delegate_, default_config_={}, force_config_={})","<p>Return a new FactoryGenerator that calls the given delegate, but modifies\nthe configuration passed to …\n"],["degenerate?","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-degenerate-3F","()","<p>Returns true if this bounding box is degenerate. That is, it is nonempty\nbut has zero area because either …\n"],["degenerate?","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-degenerate-3F","()","<p>Returns true if the rectangle has zero area.\n"],["difference","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-difference","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns a geometric object that represents the Point set difference of this\ngeometric …\n"],["dimension","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-dimension","()","<p>SFS 1.1 Description\n<p>The inherent dimension of this geometric object, which must be less than or\nequal …\n"],["disjoint?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-disjoint-3F","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object is “spatially disjoint” from\nanother_geometry. …\n"],["distance","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-distance","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns the shortest distance between any two Points in the two geometric\nobjects …\n"],["each","RGeo::Feature::GeometryCollection","RGeo/Feature/GeometryCollection.html#method-i-each","(&block_)","<p>Iterates over the geometries of this GeometryCollection.\n<p>This is not a standard SFS method, but is provided …\n"],["each_immediate_subtype","RGeo::Feature::Type","RGeo/Feature/Type.html#method-i-each_immediate_subtype","(&block_)","<p>Iterates over the known immediate subtypes of this type.\n"],["each_parameter","RGeo::CoordSys::CS::Projection","RGeo/CoordSys/CS/Projection.html#method-i-each_parameter","(&block_)","<p>Iterates over the parameters of the projection.\n"],["emit_ewkb_srid?","RGeo::WKRep::WKBGenerator","RGeo/WKRep/WKBGenerator.html#method-i-emit_ewkb_srid-3F","()","<p>Returns whether SRID is embedded. See WKBGenerator for details.\n"],["emit_ewkt_srid?","RGeo::WKRep::WKTGenerator","RGeo/WKRep/WKTGenerator.html#method-i-emit_ewkt_srid-3F","()","<p>Returns whether SRID is embedded. See WKTGenerator for details.\n"],["empty?","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-empty-3F","()","<p>Returns true if this bounding box is still empty.\n"],["end_point","RGeo::Feature::Curve","RGeo/Feature/Curve.html#method-i-end_point","()","<p>SFS 1.1 Description\n<p>The end Point of this Curve.\n<p>Notes\n"],["envelope","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-envelope","()","<p>SFS 1.1 Description\n<p>The minimum bounding box for this Geometry, returned as a Geometry. The\npolygon is …\n"],["eql?","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-eql-3F","(rhs_)","<p>Equivalence test.\n"],["eql?","RGeo::CoordSys::CS::Base","RGeo/CoordSys/CS/Base.html#method-i-eql-3F","(rhs_)","<p>Tests for equality. Two objects are defined as equal if they have the same\ntype (class) and the same …\n"],["eql?","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-eql-3F","(rhs_)","<p>Returns true if this Proj4 is equivalent to the given Proj4.\n<p>Note: this tests for equivalence by comparing …\n"],["eql?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-eql-3F","(rhs_)","<p>This method should behave almost the same as the rep_equals? method, with\ntwo key differences.\n<p>First, …\n"],["eql?","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-eql-3F","(rhs_)","<p>Equivalence test.\n"],["eql?","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-eql-3F","(rhs_)","<p>Factory equivalence test.\n"],["eql?","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-eql-3F","(rhs_)","<p>Factory equivalence test.\n"],["eql?","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-eql-3F","(rhs_)","<p>Factory equivalence test.\n"],["eql?","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-eql-3F","(rhs_)","<p>Factory equivalence test.\n"],["equals?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-equals-3F","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object is “spatially equal” to\nanother_geometry. …\n"],["exact_factory","RGeo::WKRep::WKBParser","RGeo/WKRep/WKBParser.html#method-i-exact_factory","()","<p>If this parser was given an exact factory, returns it; otherwise returns\nnil.\n"],["exact_factory","RGeo::WKRep::WKTParser","RGeo/WKRep/WKTParser.html#method-i-exact_factory","()","<p>If this parser was given an exact factory, returns it; otherwise returns\nnil.\n"],["extension","RGeo::CoordSys::CS::Info","RGeo/CoordSys/CS/Info.html#method-i-extension","(key_)","<p>Gets the value of a keyed extension. This is not part of the OGC spec, but\nit is supported because some …\n"],["exterior_ring","RGeo::Feature::Polygon","RGeo/Feature/Polygon.html#method-i-exterior_ring","()","<p>SFS 1.1 Description\n<p>Returns the exterior ring of this Polygon.\n<p>Notes\n"],["factory","RGeo::Cartesian","RGeo/Cartesian.html#method-c-factory","(opts_={})",""],["factory","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-factory","()","<p>Returns the bounding box’s factory.\n"],["factory","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-factory","()","<p>Returns a factory for creating features related to this one. This does not\nnecessarily need to be the …\n"],["factory","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-factory","()","<p>Returns the Geographic::Factory associated with this window. Note that this\nfactory is the overall geography …\n"],["factory","RGeo::Geos","RGeo/Geos.html#method-c-factory","(opts_={})","<p>Returns a factory for the GEOS implementation. Returns nil if the GEOS\nimplementation is not supported. …\n"],["factory_generator","RGeo::Cartesian","RGeo/Cartesian.html#method-c-factory_generator","(defaults_={})",""],["factory_generator","RGeo::Geos","RGeo/Geos.html#method-c-factory_generator","(defaults_={})","<p>Returns a Feature::FactoryGenerator that creates Geos-backed factories. The\ngiven options are used as …\n"],["factory_generator","RGeo::WKRep::WKBParser","RGeo/WKRep/WKBParser.html#method-i-factory_generator","()","<p>Returns the factory generator. See WKBParser for details.\n"],["factory_generator","RGeo::WKRep::WKTParser","RGeo/WKRep/WKTParser.html#method-i-factory_generator","()","<p>Returns the factory generator. See WKTParser for details.\n"],["ffi_supported?","RGeo::Geos","RGeo/Geos.html#method-c-ffi_supported-3F","()","<p>Returns true if the FFI GEOS implementation is supported.\n"],["for_corners","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-c-for_corners","(sw_, ne_)","<p>Creates a new window whose coordinates are the given points, which must be\nFeature::Point objects in …\n"],["for_type","RGeo::Feature::MixinCollection","RGeo/Feature/MixinCollection.html#method-i-for_type","(type_)","<p>Returns a TypeData for the given type.\n<p>e.g. to add a module for point types, you can call:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">for_type</span>(<span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">RGeo</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Feature</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Point</span>).<span class=\"ruby-identifier\">add</span>(<span class=\"ruby-keyword\">module</span>)\n</pre>\n"],["generate","RGeo::WKRep::WKBGenerator","RGeo/WKRep/WKBGenerator.html#method-i-generate","(obj_)","<p>Generate and return the WKB format for the given geometry object, according\nto the current settings. …\n"],["generate","RGeo::WKRep::WKTGenerator","RGeo/WKRep/WKTGenerator.html#method-i-generate","(obj_)","<p>Generate and return the WKT format for the given geometry object, according\nto the current settings. …\n"],["geocentric?","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-geocentric-3F","()","<p>Returns true if this Proj4 object is a geocentric (3dz) coordinate system.\n"],["geographic?","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-geographic-3F","()","<p>Returns true if this Proj4 object is a geographic (lat-long) coordinate\nsystem.\n"],["geometry_n","RGeo::Feature::GeometryCollection","RGeo/Feature/GeometryCollection.html#method-i-geometry_n","(n_)","<p>SFS 1.1 Description\n<p>Returns the Nth geometry in this GeometryCollection.\n<p>Notes\n"],["geometry_type","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-geometry_type","()","<p>SFS 1.1 Description\n<p>Returns the instantiable subtype of Geometry of which this geometric object\nis an …\n"],["get","RGeo::CoordSys::SRSDatabase::ActiveRecordTable","RGeo/CoordSys/SRSDatabase/ActiveRecordTable.html#method-i-get","(ident_)","<p>Retrieve an Entry given an integer SRID.\n"],["get","RGeo::CoordSys::SRSDatabase::Interface","RGeo/CoordSys/SRSDatabase/Interface.html#method-i-get","(ident_)","<p>Retrieve an Entry given an identifier. The identifier is usually a numeric\nspatial reference ID (SRID …\n"],["get","RGeo::CoordSys::SRSDatabase::Proj4Data","RGeo/CoordSys/SRSDatabase/Proj4Data.html#method-i-get","(ident_)","<p>Retrieve the Entry for the given ID number.\n"],["get","RGeo::CoordSys::SRSDatabase::SrOrg","RGeo/CoordSys/SRSDatabase/SrOrg.html#method-i-get","(ident_)","<p>Retrieve the Entry from a spatialreference.org catalog given an integer ID.\n"],["get","RGeo::CoordSys::SRSDatabase::UrlReader","RGeo/CoordSys/SRSDatabase/UrlReader.html#method-i-get","(ident_)","<p>Retrieve the given URL and return an Entry. Returns nil if the URL cannot\nbe read as an OGC WKT or Proj4 …\n"],["get_axis","RGeo::CoordSys::CS::CompoundCoordinateSystem","RGeo/CoordSys/CS/CompoundCoordinateSystem.html#method-i-get_axis","(index_)","<p>Implements CoordinateSystem#get_axis\n"],["get_axis","RGeo::CoordSys::CS::CoordinateSystem","RGeo/CoordSys/CS/CoordinateSystem.html#method-i-get_axis","(dimension_)","<p>Gets axis details for dimension within coordinate system. Each dimension in\nthe coordinate system has …\n"],["get_axis","RGeo::CoordSys::CS::GeocentricCoordinateSystem","RGeo/CoordSys/CS/GeocentricCoordinateSystem.html#method-i-get_axis","(index_)","<p>Implements CoordinateSystem#get_axis\n"],["get_axis","RGeo::CoordSys::CS::GeographicCoordinateSystem","RGeo/CoordSys/CS/GeographicCoordinateSystem.html#method-i-get_axis","(index_)","<p>Implements CoordinateSystem#get_axis\n"],["get_axis","RGeo::CoordSys::CS::LocalCoordinateSystem","RGeo/CoordSys/CS/LocalCoordinateSystem.html#method-i-get_axis","(index_)","<p>Implements CoordinateSystem#get_axis\n"],["get_axis","RGeo::CoordSys::CS::ProjectedCoordinateSystem","RGeo/CoordSys/CS/ProjectedCoordinateSystem.html#method-i-get_axis","(index_)","<p>Implements CoordinateSystem#get_axis\n"],["get_axis","RGeo::CoordSys::CS::VerticalCoordinateSystem","RGeo/CoordSys/CS/VerticalCoordinateSystem.html#method-i-get_axis","(index_)","<p>Implements CoordinateSystem#get_axis\n"],["get_geographic","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-get_geographic","()","<p>Get the geographic (unprojected lat-long) coordinate system corresponding\nto this coordinate system; …\n"],["get_parameter","RGeo::CoordSys::CS::Projection","RGeo/CoordSys/CS/Projection.html#method-i-get_parameter","(index_)","<p>Gets an inexed parameter of the projection.\n"],["get_units","RGeo::CoordSys::CS::CompoundCoordinateSystem","RGeo/CoordSys/CS/CompoundCoordinateSystem.html#method-i-get_units","(index_)","<p>Implements CoordinateSystem#get_units\n"],["get_units","RGeo::CoordSys::CS::CoordinateSystem","RGeo/CoordSys/CS/CoordinateSystem.html#method-i-get_units","(dimension_)","<p>Gets units for dimension within coordinate system. Each dimension in the\ncoordinate system has corresponding …\n"],["get_units","RGeo::CoordSys::CS::GeocentricCoordinateSystem","RGeo/CoordSys/CS/GeocentricCoordinateSystem.html#method-i-get_units","(index_)","<p>Implements CoordinateSystem#get_units\n"],["get_units","RGeo::CoordSys::CS::GeographicCoordinateSystem","RGeo/CoordSys/CS/GeographicCoordinateSystem.html#method-i-get_units","(index_)","<p>Implements CoordinateSystem#get_units\n"],["get_units","RGeo::CoordSys::CS::LocalCoordinateSystem","RGeo/CoordSys/CS/LocalCoordinateSystem.html#method-i-get_units","(index_)","<p>Implements CoordinateSystem#get_units\n"],["get_units","RGeo::CoordSys::CS::ProjectedCoordinateSystem","RGeo/CoordSys/CS/ProjectedCoordinateSystem.html#method-i-get_units","(index_)","<p>Implements CoordinateSystem#get_units\n"],["get_units","RGeo::CoordSys::CS::VerticalCoordinateSystem","RGeo/CoordSys/CS/VerticalCoordinateSystem.html#method-i-get_units","(index_)","<p>Implements CoordinateSystem#get_units\n"],["get_wgs84_conversion_info","RGeo::CoordSys::CS::GeographicCoordinateSystem","RGeo/CoordSys/CS/GeographicCoordinateSystem.html#method-i-get_wgs84_conversion_info","(index_)","<p>Gets details on a conversion to WGS84. Some geographic coordinate systems\nprovide several transformations …\n"],["has_m","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-has_m","()","<p>Returns true if this bounding box tracks M coordinates.\n"],["has_projection?","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-has_projection-3F","()","<p>Returns true if this factory supports a projection.\n"],["has_z","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-has_z","()","<p>Returns true if this bounding box tracks Z coordinates.\n"],["hash","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-hash","()","<p>Standard hash code\n"],["hash","RGeo::CoordSys::CS::Base","RGeo/CoordSys/CS/Base.html#method-i-hash","()","<p>Standard hash code\n"],["hash","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-hash","()","<p>Standard hash code\n"],["hash","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-hash","()","<p>Standard hash code\n"],["hash","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-hash","()","<p>Standard hash code\n"],["hash","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-hash","()","<p>Standard hash code\n"],["hash","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-hash","()","<p>Standard hash code\n"],["height","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-height","()",""],["hex_format?","RGeo::WKRep::WKBGenerator","RGeo/WKRep/WKBGenerator.html#method-i-hex_format-3F","()","<p>Returns whether output is converted to hex. See WKBGenerator for details.\n"],["ignore_extra_bytes?","RGeo::WKRep::WKBParser","RGeo/WKRep/WKBParser.html#method-i-ignore_extra_bytes-3F","()","<p>Returns true if this parser ignores extra bytes. See WKBParser for details.\n"],["ignore_extra_tokens?","RGeo::WKRep::WKTParser","RGeo/WKRep/WKTParser.html#method-i-ignore_extra_tokens-3F","()","<p>Returns true if this parser ignores extra tokens. See WKTParser for\ndetails.\n"],["include_in_class","RGeo::Feature::MixinCollection","RGeo/Feature/MixinCollection.html#method-i-include_in_class","(type_, klass_, include_ancestry_=false)","<p>A class that implements this type should call this method to get the\nappropriate mixins.\n<p>Shorthand for: …\n"],["include_in_class","RGeo::Feature::MixinCollection::TypeData","RGeo/Feature/MixinCollection/TypeData.html#method-i-include_in_class","(klass_, include_ancestry_=false)","<p>A class that implements this type should call this method to get the\nappropriate mixins. If include_ancestry_ …\n"],["include_in_object","RGeo::Feature::MixinCollection","RGeo/Feature/MixinCollection.html#method-i-include_in_object","(type_, obj_, include_ancestry_=false)","<p>An object that implements this type should call this method to get the\nappropriate mixins.\n<p>Shorthand for: …\n"],["include_in_object","RGeo::Feature::MixinCollection::TypeData","RGeo/Feature/MixinCollection/TypeData.html#method-i-include_in_object","(obj_, include_ancestry_=false)","<p>An object that implements this type should call this method to get the\nappropriate mixins. If include_ancestry_ …\n"],["infinitesimal?","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-infinitesimal-3F","()","<p>Returns true if this bounding box is degenerate. That is, it is nonempty\nbut contains only a single point …\n"],["inspect","RGeo::CoordSys::CS::Base","RGeo/CoordSys/CS/Base.html#method-i-inspect","()","<p>Standard object inspection output\n"],["inspect","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-inspect","()","<p>Standard object inspection output\n"],["inspect","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-inspect","()","<p>Standard object inspection output\n"],["inspect","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-inspect","()","<p>Standard object inspection output\n"],["interior_ring_n","RGeo::Feature::Polygon","RGeo/Feature/Polygon.html#method-i-interior_ring_n","(n_)","<p>SFS 1.1 Description\n<p>Returns the Nth interiorRing for this Polygon as a LineString.\n<p>Notes\n"],["interior_rings","RGeo::Feature::Polygon","RGeo/Feature/Polygon.html#method-i-interior_rings","()","<p>Returns the interior rings as a (possibly empty) array of objects that\nsupport the LinearRing interface. …\n"],["intersection","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-intersection","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns a geometric object that represents the Point set intersection of\nthis geometric …\n"],["intersects?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-intersects-3F","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object “spatially intersects”\nanother_geometry. …\n"],["is_capi_geos?","RGeo::Geos","RGeo/Geos.html#method-c-is_capi_geos-3F","(object_)","<p>Returns true if the given feature is a CAPI GEOS feature, or if the given\nfactory is a CAPI GEOS factory. …\n"],["is_closed?","RGeo::Feature::Curve","RGeo/Feature/Curve.html#method-i-is_closed-3F","()","<p>SFS 1.1 Description\n<p>Returns true if this Curve is closed [StartPoint() = EndPoint()].\n<p>Notes\n"],["is_closed?","RGeo::Feature::MultiCurve","RGeo/Feature/MultiCurve.html#method-i-is_closed-3F","()","<p>SFS 1.1 Description\n<p>Returns true if this MultiCurve is closed [StartPoint() = EndPoint() for\neach Curve …\n"],["is_empty?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-is_empty-3F","()","<p>SFS 1.1 Description\n<p>Returns true if this geometric object is the empty Geometry. If true, then\nthis geometric …\n"],["is_ffi_geos?","RGeo::Geos","RGeo/Geos.html#method-c-is_ffi_geos-3F","(object_)","<p>Returns true if the given feature is an FFI GEOS feature, or if the given\nfactory is an FFI GEOS factory. …\n"],["is_geos?","RGeo::Geos","RGeo/Geos.html#method-c-is_geos-3F","(object_)","<p>Returns true if the given feature is a GEOS feature, or if the given\nfactory is a GEOS factory. Does …\n"],["is_ring?","RGeo::Feature::Curve","RGeo/Feature/Curve.html#method-i-is_ring-3F","()","<p>SFS 1.1 Description\n<p>Returns true if this Curve is closed [StartPoint() = EndPoint()] and this\nCurve is …\n"],["is_simple?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-is_simple-3F","()","<p>SFS 1.1 Description\n<p>Returns true if this geometric object has no anomalous geometric points,\nsuch as self …\n"],["length","RGeo::Feature::Curve","RGeo/Feature/Curve.html#method-i-length","()","<p>SFS 1.1 Description\n<p>The length of this Curve in its associated spatial reference.\n<p>Notes\n"],["length","RGeo::Feature::MultiCurve","RGeo/Feature/MultiCurve.html#method-i-length","()","<p>SFS 1.1 Description\n<p>The Length of this MultiCurve which is equal to the sum of the lengths of\nthe element …\n"],["lenient_multi_polygon_assertions?","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-lenient_multi_polygon_assertions-3F","()","<p>Returns true if this factory is lenient with MultiPolygon assertions\n"],["lenient_multi_polygon_assertions?","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-lenient_multi_polygon_assertions-3F","()","<p>Returns true if this factory is lenient with MultiPolygon assertions\n"],["lenient_multi_polygon_assertions?","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-lenient_multi_polygon_assertions-3F","()","<p>Returns true if this factory is lenient with MultiPolygon assertions\n"],["lenient_multi_polygon_assertions?","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-lenient_multi_polygon_assertions-3F","()","<p>Returns true if this factory is lenient with MultiPolygon assertions\n"],["line","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-line","(start_, end_)","<p>See ::RGeo::Feature::Factory#line\n"],["line","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-line","(start_, end_)","<p>Create a feature of type Line. The given point arguments should be Point\nobjects, or objects that can …\n"],["line","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-line","(start_, end_)","<p>See ::RGeo::Feature::Factory#line\n"],["line","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-line","(start_, end_)","<p>See ::RGeo::Feature::Factory#line\n"],["line","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-line","(start_, end_)","<p>See ::RGeo::Feature::Factory#line\n"],["line","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-line","(start_, end_)","<p>See ::RGeo::Feature::Factory#line\n"],["line","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-line","(start_, end_)","<p>See ::RGeo::Feature::Factory#line\n"],["line_string","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-line_string","(points_)","<p>See ::RGeo::Feature::Factory#line_string\n"],["line_string","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-line_string","(points_)","<p>Create a feature of type LineString. The given points argument should be an\nEnumerable of Point objects, …\n"],["line_string","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-line_string","(points_)","<p>See ::RGeo::Feature::Factory#line_string\n"],["line_string","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-line_string","(points_)","<p>See ::RGeo::Feature::Factory#line_string\n"],["line_string","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-line_string","(points_)","<p>See ::RGeo::Feature::Factory#line_string\n"],["line_string","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-line_string","(points_)","<p>See ::RGeo::Feature::Factory#line_string\n"],["line_string","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-line_string","(points_)","<p>See ::RGeo::Feature::Factory#line_string\n"],["linear_ring","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-linear_ring","(points_)","<p>See ::RGeo::Feature::Factory#linear_ring\n"],["linear_ring","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-linear_ring","(points_)","<p>Create a feature of type LinearRing. The given points argument should be an\nEnumerable of Point objects, …\n"],["linear_ring","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-linear_ring","(points_)","<p>See ::RGeo::Feature::Factory#linear_ring\n"],["linear_ring","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-linear_ring","(points_)","<p>See ::RGeo::Feature::Factory#linear_ring\n"],["linear_ring","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-linear_ring","(points_)","<p>See ::RGeo::Feature::Factory#linear_ring\n"],["linear_ring","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-linear_ring","(points_)","<p>See ::RGeo::Feature::Factory#linear_ring\n"],["linear_ring","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-linear_ring","(points_)","<p>See ::RGeo::Feature::Factory#linear_ring\n"],["little_endian?","RGeo::WKRep::WKBGenerator","RGeo/WKRep/WKBGenerator.html#method-i-little_endian-3F","()","<p>Returns whether output is little-endian (NDR). See WKBGenerator for\ndetails.\n"],["m","RGeo::Feature::Point","RGeo/Feature/Point.html#method-i-m","()","<p>Returns the m-coordinate for this Point as a floating-point scalar value.\n<p>This method may not be available …\n"],["m_factory","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-m_factory","()","<p>Returns the m-only factory corresponding to this factory.\n"],["m_span","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-m_span","()","<p>Returns the M span, 0 if this bounding box is empty, or nil if it has no M.\n"],["max_m","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-max_m","()","<p>Returns the maximum M, or nil if this bounding box is empty.\n"],["max_point","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-max_point","()","<p>Returns a point representing the maximum extent in all dimensions, or nil\nif this bounding box is empty. …\n"],["max_x","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-max_x","()","<p>Returns the maximum X, or nil if this bounding box is empty.\n"],["max_y","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-max_y","()","<p>Returns the maximum Y, or nil if this bounding box is empty.\n"],["max_z","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-max_z","()","<p>Returns the maximum Z, or nil if this bounding box is empty.\n"],["meters_per_unit","RGeo::CoordSys::CS::LinearUnit","RGeo/CoordSys/CS/LinearUnit.html#method-i-meters_per_unit","()","<p>Returns the number of meters per LinearUnit. Also available as\nUnit#conversion_factor.\n"],["min_m","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-min_m","()","<p>Returns the minimum M, or nil if this bounding box is empty.\n"],["min_point","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-min_point","()","<p>Returns a point representing the minimum extent in all dimensions, or nil\nif this bounding box is empty. …\n"],["min_x","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-min_x","()","<p>Returns the minimum X, or nil if this bounding box is empty.\n"],["min_y","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-min_y","()","<p>Returns the minimum Y, or nil if this bounding box is empty.\n"],["min_z","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-min_z","()","<p>Returns the minimum Z, or nil if this bounding box is empty.\n"],["multi_line_string","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-multi_line_string","(elems_)","<p>See ::RGeo::Feature::Factory#multi_line_string\n"],["multi_line_string","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-multi_line_string","(elems_)","<p>Create a feature of type MultiLineString. The elems should be an Enumerable\nof objects that are or can …\n"],["multi_line_string","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-multi_line_string","(elems_)","<p>See ::RGeo::Feature::Factory#multi_line_string\n"],["multi_line_string","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-multi_line_string","(elems_)","<p>See ::RGeo::Feature::Factory#multi_line_string\n"],["multi_line_string","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-multi_line_string","(elems_)","<p>See ::RGeo::Feature::Factory#multi_line_string\n"],["multi_line_string","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-multi_line_string","(elems_)","<p>See ::RGeo::Feature::Factory#multi_line_string\n"],["multi_line_string","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-multi_line_string","(elems_)","<p>See ::RGeo::Feature::Factory#multi_line_string\n"],["multi_point","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-multi_point","(elems_)","<p>See ::RGeo::Feature::Factory#multi_point\n"],["multi_point","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-multi_point","(elems_)","<p>Create a feature of type MultiPoint. The elems should be an Enumerable of\nPoint objects, or objects that …\n"],["multi_point","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-multi_point","(elems_)","<p>See ::RGeo::Feature::Factory#multi_point\n"],["multi_point","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-multi_point","(elems_)","<p>See ::RGeo::Feature::Factory#multi_point\n"],["multi_point","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-multi_point","(elems_)","<p>See ::RGeo::Feature::Factory#multi_point\n"],["multi_point","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-multi_point","(elems_)","<p>See ::RGeo::Feature::Factory#multi_point\n"],["multi_point","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-multi_point","(elems_)","<p>See ::RGeo::Feature::Factory#multi_point\n"],["multi_polygon","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-multi_polygon","(elems_)","<p>See ::RGeo::Feature::Factory#multi_polygon\n"],["multi_polygon","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-multi_polygon","(elems_)","<p>Create a feature of type MultiPolygon. The elems should be an Enumerable of\nobjects that are or can be …\n"],["multi_polygon","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-multi_polygon","(elems_)","<p>See ::RGeo::Feature::Factory#multi_polygon\n"],["multi_polygon","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-multi_polygon","(elems_)","<p>See ::RGeo::Feature::Factory#multi_polygon\n"],["multi_polygon","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-multi_polygon","(elems_)","<p>See ::RGeo::Feature::Factory#multi_polygon\n"],["multi_polygon","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-multi_polygon","(elems_)","<p>See ::RGeo::Feature::Factory#multi_polygon\n"],["multi_polygon","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-multi_polygon","(elems_)","<p>See ::RGeo::Feature::Factory#multi_polygon\n"],["ne_point","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-ne_point","()","<p>Returns the northeast corner of the rectangle in <em>unprojected</em>\n(lat/lng) space, as a Feature::Point object. …\n"],["new","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-c-new","(factory_, opts_={})","<p>Create a new empty bounding box with the given factory.\n<p>The factory defines the coordinate system for …\n"],["new","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-c-new","(opts_={})","<p>Create a new simple cartesian factory.\n<p>See ::RGeo::Cartesian.simple_factory for a list of supported options. …\n"],["new","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-c-new","(defn_, opts_={})","<p>Create a new Proj4 object, given a definition, which may be either a string\nor a hash. Raises Error::UnsupportedOperation …\n"],["new","RGeo::CoordSys::SRSDatabase::ActiveRecordTable","RGeo/CoordSys/SRSDatabase/ActiveRecordTable.html#method-c-new","(opts_={})","<p>Create a new ActiveRecord-backed database connection.\n<p>Options include:\n<p>:ar_class &mdash; An ActiveRecord class …\n"],["new","RGeo::CoordSys::SRSDatabase::Entry","RGeo/CoordSys/SRSDatabase/Entry.html#method-c-new","(ident_, data_={})","<p>Create an entry. You must provide an identifier, which may be numeric or a\nstring. The data hash should …\n"],["new","RGeo::CoordSys::SRSDatabase::Proj4Data","RGeo/CoordSys/SRSDatabase/Proj4Data.html#method-c-new","(filename_, opts_={})","<p>Connect to one of the proj4 data files. You should provide the file name,\noptionally the installation …\n"],["new","RGeo::CoordSys::SRSDatabase::SrOrg","RGeo/CoordSys/SRSDatabase/SrOrg.html#method-c-new","(catalog_, opts_={})","<p>Create a database backed by the given catalog of the spatialreference.org\nwebsite. Catalogs currently …\n"],["new","RGeo::CoordSys::SRSDatabase::UrlReader","RGeo/CoordSys/SRSDatabase/UrlReader.html#method-c-new","(opts_={})","<p>Create a URL-based spatial reference database.\n<p>Options:\n<p>:cache &mdash; If set to true, lookup results are cached …\n"],["new","RGeo::Feature::MixinCollection","RGeo/Feature/MixinCollection.html#method-c-new","()","<p>Create a new empty MixinCollection\n"],["new","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-c-new","(factory_, x_min_, y_min_, x_max_, y_max_, opts_={})","<p>Create a new ProjectedWindow given the Geographic::Factory, and the x and y\nextents of the rectangle. …\n"],["new","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-c-new","(opts_={})",""],["new","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-c-new","(opts_={})",""],["new","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-c-new","(opts_={})","<p>Create a new factory. Returns nil if the FFI-GEOS implementation is not\nsupported.\n<p>See ::RGeo::Geos.factory …\n"],["new","RGeo::WKRep::WKBGenerator","RGeo/WKRep/WKBGenerator.html#method-c-new","(opts_={})","<p>Create and configure a WKB generator. See the WKBGenerator documentation\nfor the options that can be …\n"],["new","RGeo::WKRep::WKBParser","RGeo/WKRep/WKBParser.html#method-c-new","(factory_generator_=nil, opts_={})","<p>Create and configure a WKB parser. See the WKBParser documentation for the\noptions that can be passed. …\n"],["new","RGeo::WKRep::WKTGenerator","RGeo/WKRep/WKTGenerator.html#method-c-new","(opts_={})","<p>Create and configure a WKT generator. See the WKTGenerator documentation\nfor the options that can be …\n"],["new","RGeo::WKRep::WKTParser","RGeo/WKRep/WKTParser.html#method-c-new","(factory_generator_=nil, opts_={})","<p>Create and configure a WKT parser. See the WKTParser documentation for the\noptions that can be passed. …\n"],["num_conversion_to_wgs84","RGeo::CoordSys::CS::GeographicCoordinateSystem","RGeo/CoordSys/CS/GeographicCoordinateSystem.html#method-i-num_conversion_to_wgs84","()","<p>Gets the number of available conversions to WGS84 coordinates.\n"],["num_geometries","RGeo::Feature::GeometryCollection","RGeo/Feature/GeometryCollection.html#method-i-num_geometries","()","<p>SFS 1.1 Description\n<p>Returns the number of geometries in this GeometryCollection.\n<p>Notes\n"],["num_interior_rings","RGeo::Feature::Polygon","RGeo/Feature/Polygon.html#method-i-num_interior_rings","()","<p>SFS 1.1 Description\n<p>Returns the number of interiorRings in this Polygon.\n<p>Notes\n"],["num_parameters","RGeo::CoordSys::CS::Projection","RGeo/CoordSys/CS/Projection.html#method-i-num_parameters","()","<p>Gets number of parameters of the projection.\n"],["num_points","RGeo::Feature::LineString","RGeo/Feature/LineString.html#method-i-num_points","()","<p>SFS 1.1 Description\n<p>The number of Points in this LineString.\n<p>Notes\n"],["nw_point","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-nw_point","()","<p>Returns the northwest corner of the rectangle in <em>unprojected</em>\n(lat/lng) space, as a Feature::Point object. …\n"],["original_str","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-original_str","()","<p>Returns the string definition originally used to construct this object.\nReturns nil if this object wasn’t …\n"],["overlaps?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-overlaps-3F","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object “spatially overlaps”\nanother_geometry. …\n"],["override_cast","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-override_cast","(original_, type_, flags_)","<p>This is an optional method that may be implemented to customize casting for\nthis factory. Basically, …\n"],["override_cast","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-override_cast","(original_, ntype_, flags_)","<p>See ::RGeo::Feature::Factory#override_cast\n"],["override_cast","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-override_cast","(original_, ntype_, flags_)","<p>See ::RGeo::Feature::Factory#override_cast\n"],["override_cast","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-override_cast","(original_, ntype_, flags_)","<p>See ::RGeo::Feature::Factory#override_cast\n"],["override_cast","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-override_cast","(original_, ntype_, flags_)","<p>See ::RGeo::Feature::Factory#override_cast\n"],["parse","RGeo::WKRep::WKBParser","RGeo/WKRep/WKBParser.html#method-i-parse","(data_)","<p>Parse the given binary data or hexadecimal string, and return a geometry\nobject.\n<p>The #parse_hex method …\n"],["parse","RGeo::WKRep::WKTParser","RGeo/WKRep/WKTParser.html#method-i-parse","(str_)","<p>Parse the given string, and return a geometry object.\n"],["parse_hex","RGeo::WKRep::WKBParser","RGeo/WKRep/WKBParser.html#method-i-parse_hex","(data_)",""],["parse_wkb","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-parse_wkb","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkb\n"],["parse_wkb","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-parse_wkb","(str_)","<p>Parse the given string in well-known-binary format and return the resulting\nfeature. Returns nil if the …\n"],["parse_wkb","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-parse_wkb","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkb\n"],["parse_wkb","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-parse_wkb","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkb\n"],["parse_wkb","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-parse_wkb","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkb\n"],["parse_wkb","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-parse_wkb","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkb\n"],["parse_wkb","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-parse_wkb","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkb\n"],["parse_wkt","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-parse_wkt","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkt\n"],["parse_wkt","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-parse_wkt","(str_)","<p>Parse the given string in well-known-text format and return the resulting\nfeature. Returns nil if the …\n"],["parse_wkt","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-parse_wkt","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkt\n"],["parse_wkt","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-parse_wkt","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkt\n"],["parse_wkt","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-parse_wkt","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkt\n"],["parse_wkt","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-parse_wkt","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkt\n"],["parse_wkt","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-parse_wkt","(str_)","<p>See ::RGeo::Feature::Factory#parse_wkt\n"],["point","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-point","(x_, y_, *extra_)","<p>See ::RGeo::Feature::Factory#point\n"],["point","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-point","(x_, y_, *extra_)","<p>Create a feature of type Point. The x and y parameters should be Float\nvalues.\n<p>The extra parameters should …\n"],["point","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-point","(x_, y_, *extra_)","<p>See ::RGeo::Feature::Factory#point\n"],["point","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-point","(x_, y_, *extra_)","<p>See ::RGeo::Feature::Factory#point\n"],["point","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-point","(x_, y_, *extra_)","<p>See ::RGeo::Feature::Factory#point\n"],["point","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-point","(x_, y_, z_=0)","<p>See ::RGeo::Feature::Factory#point\n"],["point","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-point","(x_, y_, z_=0, m_=0)","<p>See ::RGeo::Feature::Factory#point\n"],["point_n","RGeo::Feature::LineString","RGeo/Feature/LineString.html#method-i-point_n","(n_)","<p>SFS 1.1 Description\n<p>Returns the specified Point N in this LineString.\n<p>Notes\n"],["point_on_surface","RGeo::Feature::MultiSurface","RGeo/Feature/MultiSurface.html#method-i-point_on_surface","()","<p>SFS 1.1 Description\n<p>A Point guaranteed to be on this MultiSurface.\n<p>Notes\n"],["point_on_surface","RGeo::Feature::Surface","RGeo/Feature/Surface.html#method-i-point_on_surface","()","<p>SFS 1.1 Description\n<p>A Point guaranteed to be on this Surface.\n<p>Notes\n"],["points","RGeo::Feature::LineString","RGeo/Feature/LineString.html#method-i-points","()","<p>Returns the constituent points as an array of objects that support the\nPoint interface.\n"],["polygon","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-polygon","(outer_ring_, inner_rings_=nil)","<p>See ::RGeo::Feature::Factory#polygon\n"],["polygon","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-polygon","(outer_ring_, inner_rings_=nil)","<p>Create a feature of type Polygon. The outer_ring should be a LinearRing, or\nan object that can be cast …\n"],["polygon","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-polygon","(outer_ring_, inner_rings_=nil)","<p>See ::RGeo::Feature::Factory#polygon\n"],["polygon","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-polygon","(outer_ring_, inner_rings_=nil)","<p>See ::RGeo::Feature::Factory#polygon\n"],["polygon","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-polygon","(outer_ring_, inner_rings_=nil)","<p>See ::RGeo::Feature::Factory#polygon\n"],["polygon","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-polygon","(outer_ring_, inner_rings_=nil)","<p>See ::RGeo::Feature::Factory#polygon\n"],["polygon","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-polygon","(outer_ring_, inner_rings_=nil)","<p>See ::RGeo::Feature::Factory#polygon\n"],["preferred_factory","RGeo::Cartesian","RGeo/Cartesian.html#method-c-preferred_factory","(opts_={})","<p>Creates and returns a cartesian factory of the preferred Cartesian\nimplementation.\n<p>The actual implementation …\n"],["preferred_factory_generator","RGeo::Cartesian","RGeo/Cartesian.html#method-c-preferred_factory_generator","(defaults_={})","<p>Returns a Feature::FactoryGenerator that creates preferred factories. The\ngiven options are used as the …\n"],["proj4","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-proj4","()","<p>See ::RGeo::Feature::Factory#proj4\n"],["proj4","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-proj4","()","<p>Returns a RGeo::CoordSys::Proj4 representing the projection for the\ncoordinate system of features created …\n"],["proj4","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-proj4","()","<p>See ::RGeo::Feature::Factory#proj4\n"],["proj4","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-proj4","()","<p>See ::RGeo::Feature::Factory#proj4\n"],["proj4","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-proj4","()","<p>See ::RGeo::Feature::Factory#proj4\n"],["proj4","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-proj4","()","<p>See ::RGeo::Feature::Factory#proj4\n"],["proj4","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-proj4","()","<p>See ::RGeo::Feature::Factory#proj4\n"],["project","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-project","(geometry_)","<p>Projects the given geometry into the projected coordinate space, and\nreturns the projected geometry. …\n"],["projected_factory","RGeo::Geographic","RGeo/Geographic.html#method-c-projected_factory","(opts_={})","<p>Creates and returns a geographic factory that includes a projection\nspecified by a Proj4 coordinate system. …\n"],["projection_factory","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-projection_factory","()","<p>Returns the factory for the projected coordinate space, or nil if this\nfactory does not support a projection. …\n"],["projection_limits_window","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-projection_limits_window","()","<p>Returns a ProjectedWindow specifying the limits of the domain of the\nprojection space. Returns nil if …\n"],["projection_wraps?","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-projection_wraps-3F","()","<p>Returns true if this factory supports a projection and the projection wraps\nits x (easting) direction. …\n"],["property","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-property","(name_)","<p>See ::RGeo::Feature::Factory#property\n"],["property","RGeo::Feature::Factory","RGeo/Feature/Factory.html#method-i-property","(name_)","<p>Returns meta-information about this factory, by key. This information may\ninvolve support for optional …\n"],["property","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-property","(name_)","<p>See ::RGeo::Feature::Factory#property\n"],["property","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-property","(name_)","<p>See ::RGeo::Feature::Factory#property\n"],["property","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-property","(name_)","<p>See ::RGeo::Feature::Factory#property\n"],["property","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-property","(name_)","<p>See ::RGeo::Feature::Factory#property\n"],["property","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-property","(name_)","<p>See ::RGeo::Feature::Factory#property\n"],["radians?","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-i-radians-3F","()","<p>Returns true if this Proj4 object uses radians rather than degrees if it is\na geographic coordinate system. …\n"],["radians_per_unit","RGeo::CoordSys::CS::AngularUnit","RGeo/CoordSys/CS/AngularUnit.html#method-i-radians_per_unit","()","<p>Returns the number of radians per AngularUnit. Also available as\nUnit#conversion_factor.\n"],["random_point","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-random_point","()","<p>Returns a random point the rectangle in <em>unprojected</em> (lat/lng)\nspace, as a Feature::Point object.\n"],["relate","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-relate","(another_geometry_, intersection_pattern_matrix_)","<p>Deprecated alias of Geometry#relate?\n"],["relate?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-relate-3F","(another_geometry_, intersection_pattern_matrix_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object is spatially related to\nanother_geometry by …\n"],["rep_equals?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-rep_equals-3F","(another_geometry_)","<p>Returns true if this geometric object is representationally equivalent to\nthe given object.\n<p>Although implementations …\n"],["ring_direction","RGeo::Cartesian::Analysis","RGeo/Cartesian/Analysis.html#method-c-ring_direction","(ring_)","<p>Given a LineString, which must be a ring, determine whether the ring\nproceeds clockwise or counterclockwise. …\n"],["scaled_by","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-scaled_by","(x_factor_, y_factor_=nil)","<p>Returns a new window resulting from scaling this window by the given\nfactors, which must be floating-point …\n"],["se_point","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-se_point","()","<p>Returns the southeast corner of the rectangle in <em>unprojected</em>\n(lat/lng) space, as a Feature::Point object. …\n"],["simple_factory","RGeo::Cartesian","RGeo/Cartesian.html#method-c-simple_factory","(opts_={})","<p>Returns a factory for the simple Cartesian implementation. This\nimplementation provides all SFS 1.1 types, …\n"],["simple_factory_generator","RGeo::Cartesian","RGeo/Cartesian.html#method-c-simple_factory_generator","(defaults_={})","<p>Returns a Feature::FactoryGenerator that creates simple factories. The\ngiven options are used as the …\n"],["simple_mercator_factory","RGeo::Geographic","RGeo/Geographic.html#method-c-simple_mercator_factory","(opts_={})","<p>Creates and returns a geographic factory that is designed for visualization\napplications that use Google …\n"],["single","RGeo::Feature::FactoryGenerator","RGeo/Feature/FactoryGenerator.html#method-c-single","(factory_)","<p>Return a new FactoryGenerator that always returns the given factory.\n"],["size","RGeo::Feature::GeometryCollection","RGeo/Feature/GeometryCollection.html#method-i-size","()","<p>Alias of the num_geometries method.\n"],["spherical_factory","RGeo::Geographic","RGeo/Geographic.html#method-c-spherical_factory","(opts_={})","<p>Creates and returns a geographic factory that does not include a a\nprojection, and which performs calculations …\n"],["square_brackets?","RGeo::WKRep::WKTGenerator","RGeo/WKRep/WKTGenerator.html#method-i-square_brackets-3F","()","<p>Returns whether square brackets rather than parens are output. See\nWKTGenerator for details.\n"],["srid","RGeo::Cartesian::Factory","RGeo/Cartesian/Factory.html#method-i-srid","()","<p>Returns the SRID.\n"],["srid","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-srid","()","<p>SFS 1.1 Description\n<p>Returns the Spatial Reference System ID for this geometric object.\n<p>Notes\n"],["srid","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-srid","()","<p>Returns the srid reported by this factory.\n"],["srid","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-srid","()","<p>Returns the SRID of geometries created by this factory.\n"],["srid","RGeo::Geos::CAPIFactory","RGeo/Geos/CAPIFactory.html#method-i-srid","()","<p>Returns the SRID of geometries created by this factory.\n"],["srid","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-srid","()","<p>Returns the SRID of geometries created by this factory.\n"],["srid","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-srid","()","<p>Returns the SRID of geometries created by this factory.\n"],["start_point","RGeo::Feature::Curve","RGeo/Feature/Curve.html#method-i-start_point","()","<p>SFS 1.1 Description\n<p>The start Point of this Curve.\n<p>Notes\n"],["strict_wkt11?","RGeo::WKRep::WKTParser","RGeo/WKRep/WKTParser.html#method-i-strict_wkt11-3F","()","<p>Returns true if this parser strictly adheres to WKT 1.1. See WKTParser for\ndetails.\n"],["subdivide","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-subdivide","(opts_={})","<p>Returns this bounding box subdivided, as an array of bounding boxes. If\nthis bounding box is empty, returns …\n"],["subtype_of?","RGeo::Feature::Type","RGeo/Feature/Type.html#method-i-subtype_of-3F","(type_)","<p>Returns true if this type is the same type or a subtype of the given type.\n"],["supertype","RGeo::Feature::Type","RGeo/Feature/Type.html#method-i-supertype","()","<p>Returns the supertype of this type. The supertype of Geometry is nil.\n"],["support_ewkb?","RGeo::WKRep::WKBParser","RGeo/WKRep/WKBParser.html#method-i-support_ewkb-3F","()","<p>Returns true if this parser supports EWKB. See WKBParser for details.\n"],["support_ewkt?","RGeo::WKRep::WKTParser","RGeo/WKRep/WKTParser.html#method-i-support_ewkt-3F","()","<p>Returns true if this parser supports EWKT. See WKTParser for details.\n"],["support_wkb12?","RGeo::WKRep::WKBParser","RGeo/WKRep/WKBParser.html#method-i-support_wkb12-3F","()","<p>Returns true if this parser supports SFS 1.2 extensions. See WKBParser for\ndetails.\n"],["support_wkt12?","RGeo::WKRep::WKTParser","RGeo/WKRep/WKTParser.html#method-i-support_wkt12-3F","()","<p>Returns true if this parser supports SFS 1.2 extensions. See WKTParser for\ndetails.\n"],["supported?","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-c-supported-3F","()","<p>Returns true if Proj4 is supported in this installation. If this returns\nfalse, the other methods such …\n"],["supported?","RGeo::Geos","RGeo/Geos.html#method-c-supported-3F","()","<p>Returns true if any GEOS implementation is supported. If this returns\nfalse, GEOS features are not available …\n"],["surrounding_point","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-c-surrounding_point","(point_, x_margin_=nil, y_margin_=nil)","<p>Creates a new window that surrounds the given point with the given margin.\nThe point must be a Feature::Point …\n"],["sw_point","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-sw_point","()","<p>Returns the southwest corner of the rectangle in <em>unprojected</em>\n(lat/lng) space, as a Feature::Point object. …\n"],["sym_difference","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-sym_difference","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns a geometric object that represents the Point set symmetric\ndifference of this …\n"],["tag_format","RGeo::WKRep::WKTGenerator","RGeo/WKRep/WKTGenerator.html#method-i-tag_format","()","<p>Returns the format for type tags. See WKTGenerator for details.\n"],["to_geometry","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-to_geometry","()","<p>Converts this bounding box to an envelope, which will be the empty\ncollection (if the bounding box is …\n"],["to_s","RGeo::CoordSys::CS::Base","RGeo/CoordSys/CS/Base.html#method-i-to_s","()","<p>Returns the default WKT representation.\n"],["to_s","RGeo::Feature::Type","RGeo/Feature/Type.html#method-i-to_s","()",""],["to_wkt","RGeo::CoordSys::CS::Base","RGeo/CoordSys/CS/Base.html#method-i-to_wkt","(opts_={})","<p>Computes the WKT representation. Options include:\n<p>:standard_brackets &mdash; If set to true, outputs parentheses …\n\n"],["touches?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-touches-3F","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object “spatially touches” another_geometry.\n…\n"],["transform","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-c-transform","(from_proj_, from_geometry_, to_proj_, to_factory_)","<p>Low-level geometry transform method. Transforms the given geometry between\nthe given two projections. …\n"],["transform_coords","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-c-transform_coords","(from_proj_, to_proj_, x_, y_, z_=nil)","<p>Low-level coordinate transform method. Transforms the given coordinate (x,\ny, [z]) from one proj4 coordinate …\n"],["type_format","RGeo::WKRep::WKBGenerator","RGeo/WKRep/WKBGenerator.html#method-i-type_format","()","<p>Returns the format for type codes. See WKBGenerator for details.\n"],["type_format","RGeo::WKRep::WKTGenerator","RGeo/WKRep/WKTGenerator.html#method-i-type_format","()",""],["type_name","RGeo::Feature::Type","RGeo/Feature/Type.html#method-i-type_name","()","<p>Returns the OpenGIS type name of this type. For example:\n\n<pre>::RGeo::Feature::Point.type_name  # &quot;Point&quot;</pre>\n"],["union","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-union","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns a geometric object that represents the Point set union of this\ngeometric object …\n"],["unproject","RGeo::Geographic::Factory","RGeo/Geographic/Factory.html#method-i-unproject","(geometry_)","<p>Reverse-projects the given geometry from the projected coordinate space\ninto lat-long space. Raises  …\n"],["version","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-c-version","()","<p>Returns the Proj4 library version as a Versionomy object if the Versionomy\nlibrary is available; otherwise …\n"],["version","RGeo::Geos","RGeo/Geos.html#method-c-version","()","<p>Returns the GEOS library version as a Versionomy object if the Versionomy\nlibrary is available; otherwise …\n"],["version_string","RGeo::CoordSys::Proj4","RGeo/CoordSys/Proj4.html#method-c-version_string","()","<p>Returns the Proj library version as a string of the format “x.y.z”. Returns\nnil if Proj4 is …\n"],["version_string","RGeo::Geos","RGeo/Geos.html#method-c-version_string","()","<p>Returns the GEOS library version as a string of the format “x.y.z”. Returns\nnil if GEOS is …\n"],["width","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-width","()",""],["with_margin","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-with_margin","(x_margin_, y_margin_=nil)","<p>Returns a new window resulting from adding the given margin to this window.\nIf y_margin is not given, …\n"],["within?","RGeo::Feature::Geometry","RGeo/Feature/Geometry.html#method-i-within-3F","(another_geometry_)","<p>SFS 1.1 Description\n<p>Returns true if this geometric object is “spatially within”\nanother_geometry. …\n"],["wrap_fg_geom","RGeo::Geos::FFIFactory","RGeo/Geos/FFIFactory.html#method-i-wrap_fg_geom","(fg_geom_)","<p>Create a feature that wraps the given ffi-geos geometry object\n"],["x","RGeo::Feature::Point","RGeo/Feature/Point.html#method-i-x","()","<p>SFS 1.1 Description\n<p>The x-coordinate value for this Point.\n<p>Notes\n"],["x_max","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-x_max","()","<p>Returns the upper limit in the x (easting) direction.\n"],["x_min","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-x_min","()","<p>Returns the lower limit in the x (easting) direction.\n"],["x_span","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-x_span","()","<p>Returns the X span, or 0 if this bounding box is empty.\n"],["x_span","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-x_span","()","<p>Returns the width of the rectangle.\n"],["y","RGeo::Feature::Point","RGeo/Feature/Point.html#method-i-y","()","<p>SFS 1.1 Description\n<p>The y-coordinate value for this Point.\n<p>Notes\n"],["y_max","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-y_max","()","<p>Returns the upper limit in the y (northing) direction.\n"],["y_min","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-y_min","()","<p>Returns the lower limit in the y (northing) direction.\n"],["y_span","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-y_span","()","<p>Returns the Y span, or 0 if this bounding box is empty.\n"],["y_span","RGeo::Geographic::ProjectedWindow","RGeo/Geographic/ProjectedWindow.html#method-i-y_span","()","<p>Returns the height of the rectangle.\n"],["yaml_supported?","RGeo","RGeo.html#method-c-yaml_supported-3F","()","<p>Returns true if YAML serialization and deserialization is supported. YAML\nsupport requires the Psych …\n"],["z","RGeo::Feature::Point","RGeo/Feature/Point.html#method-i-z","()","<p>Returns the z-coordinate for this Point as a floating-point scalar value.\n<p>This method may not be available …\n"],["z_factory","RGeo::Geos::ZMFactory","RGeo/Geos/ZMFactory.html#method-i-z_factory","()","<p>Returns the z-only factory corresponding to this factory.\n"],["z_span","RGeo::Cartesian::BoundingBox","RGeo/Cartesian/BoundingBox.html#method-i-z_span","()","<p>Returns the Z span, 0 if this bounding box is empty, or nil if it has no Z.\n"],["History","","History_rdoc.html","","<p>0.3.19 / 2012-09-20\n<p>The Geos factories, as well as the projected geographic convenience\nfactories such …\n"],["README","","README_rdoc.html","","<p>RGeo\n<p>RGeo is a geospatial data library for Ruby.\n<p>Summary\n"],["Spatial_Programming_With_RGeo","","Spatial_Programming_With_RGeo_rdoc.html","","<p>An Introduction to Spatial Programming With RGeo\n<p>by Daniel Azuma\n<p>version 0.4 (23 May 2011)\n"]]}}